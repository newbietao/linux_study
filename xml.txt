XML的学习
一、什么是XML
	XML 指可扩展标记语言（EXtensible Markup Language）
	XML 是一种标记语言，很类似 HTML
	XML 的设计宗旨是传输数据，而非显示数据
	XML 标签没有被预定义。您需要自行定义标签。
	XML 被设计为具有自我描述性。
	XML 是 W3C 的推荐标准
二、XML和HTML的区别
	（一）、语法要求不同：
		1. 在html中不区分大小写，在xml中严格区分。
		2. 在HTML中，有时不严格，如果上下文清楚地显示出段落或者列表键在何处结尾，
		那么你可以省略</p>或者</li>之类的结束标记。在XML中，是严格的树状结构，
		绝对不能省略掉结束标记。
		3. 在XML中，拥有单个标记而没有匹配的结束标记的元素必须用一个/ 字符作为结尾。
		这样分析器就知道不用查找结束标记了。
		4. 在XML中，属性值必须分装在引号中。在HTML中，引号是可用可不用的。 
		5. 在HTML中，可以拥有不带值的属性名。在XML中，所有的属性都必须带有相应的值。 
		6. 在XML文档中，空白部分不会被解析器自动删除；但是html是过滤掉空格的。
	（二）、标记不同：
		1、html使用固有的标记；而xml没有固有的标记。
		2、Html标签是预定义的；XML标签是免费的、自定义的、可扩展的。
	（三）、作用不同：
		1. html是用来显示数据的；xml是用来描述数据、存放数据的，所以可以作为持久化的
		介质！Html将数据和显示结合在一起，在页面中把这数据显示出来；xml
		则将数据和显示分开。 XML被设计用来描述数据，其焦点是数据的内容。HTML被设计用来
		显示数据，其焦点是数据的外观。
		2. xml不是HTML的替代品，xml和html是两种不同用途的语言。 XML 不是要替换 HTML；
		实际上XML 可以视作对 HTML 的补充。XML 和HTML 的目标不同HTML 的设计目标是显示
		数据并集中于数据外观，而XML的设计目标是描述数据并集中于数据的内容。
		3. 没有任何行为的XML。与HTML 相似，XML 不进行任何操作。（共同点）
		4. 对于XML最好的形容可能是: XML是一种跨平台的，与软、硬件无关的，处理与传输信息的工具。
		5. XML未来将会无所不在。XML将成为最普遍的数据处理和数据传输的工具。
三、XML的用途：
	(一)、XML 把数据从 HTML 分离
	(二)、XML 简化数据共享
	(三)、XML 简化数据传输
	(四)、XML 简化平台的变更
	(五)、XML 使您的数据更有用
	(六)、XML 用于创建新的 Internet 语言
四、XML 树结构：XML 文档形成了一种树结构，它从“根部”开始，然后扩展到“枝叶”。
	XML 文档形成一种树结构
	XML 文档必须包含根元素。该元素是所有其他元素的父元素。
	XML 文档中的元素形成了一棵文档树。这棵树从根部开始，并扩展到树的最底端。
	所有元素均可拥有子元素：
	<?xml version="1.0" encoding="ISO-8859-1"?>
	<!--它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)。-->
	<root><!--根元素-->
		<subchild>.....</subchild>
	  </child>
	  <child>
		<subchild>.....</subchild>
	  </child>
	</root>
	父、子以及同胞等术语用于描述元素之间的关系。父元素拥有子元素。相同层级上的子元素成为
	同胞（兄弟或姐妹）。所有元素均可拥有文本内容和属性（类似 HTML 中）。
	
五、XML 语法规则
	1.所有 XML 元素都须有关闭标签
		在 HTML，经常会看到没有关闭标签的元素：
		<p>This is a paragraph
		<p>This is another paragraph
		在 XML 中，省略关闭标签是非法的。所有元素都必须有关闭标签：
		<p>This is a paragraph</p>
		<p>This is another paragraph</p>  
		注释：您也许已经注意到 XML 声明没有关闭标签。这不是错误。声明不属于XML本身的
		组成部分。它不是 XML 元素，也不需要关闭标签。
	2.XML 标签对大小写敏感
		XML 元素使用 XML 标签进行定义。
		XML 标签对大小写敏感。在 XML 中，标签 <Letter> 与标签 <letter> 是不同的。
		必须使用相同的大小写来编写打开标签和关闭标签：
		<Message>这是错误的。</message>
		<message>这是正确的。</message> 
		注释：打开标签和关闭标签通常被称为开始标签和结束标签。不论您喜欢哪种术语，
		它们的概念都是相同的。
	3.XML 必须正确地嵌套
		在 HTML 中，常会看到没有正确嵌套的元素：
		<b><i>This text is bold and italic</b></i>
		在 XML 中，所有元素都必须彼此正确地嵌套：
		<b><i>This text is bold and italic</i></b>
		在上例中，正确嵌套的意思是：由于 <i> 元素是在 <b> 元素内打开的，那么它必须在 <b> 元素内关闭。
	4.XML 文档必须有根元素
		XML 文档必须有一个元素是所有其他元素的父元素。该元素称为根元素。
		<root>
		  <child>
			<subchild>.....</subchild>
		  </child>
		</root>
	5.XML 的属性值须加引号
		与 HTML 类似，XML 也可拥有属性（名称/值的对）。
		在 XML 中，XML 的属性值须加引号。请研究下面的两个 XML 文档。第一个是错误的，第二个是正确的：
		<note date=08/08/2008>
		<to>George</to>
		<from>John</from>
		</note> 
		<note date="08/08/2008">
		<to>George</to>
		<from>John</from>
		</note> 
		在第一个文档中的错误是，note 元素中的 date 属性没有加引号。
	6.实体引用
		在 XML 中，一些字符拥有特殊的意义。
		如果你把字符 "<" 放在 XML 元素中，会发生错误，这是因为解析器会把它当作新元素的开始。
		这样会产生 XML 错误：
		<message>if salary < 1000 then</message>
		为了避免这个错误，请用实体引用来代替 "<" 字符：
		<message>if salary &lt; 1000 then</message> 
		在 XML 中，有 5 个预定义的实体引用：
		&lt;	<	小于
		&gt;	>	大于
		&amp;	&	和号
		&apos;	'	单引号
		&quot;	"	引号
		注释：在 XML 中，只有字符 "<" 和 "&" 确实是非法的。大于号是合法的，
		但是用实体引用来代替它是一个好习惯。
	7.XML 中的注释
		在 XML 中编写注释的语法与 HTML 的语法很相似：
		<!-- This is a comment --> 
	8.在 XML 中，空格会被保留
		HTML 会把多个连续的空格字符裁减（合并）为一个：
		HTML:	Hello           my name is David.
		输出:	Hello my name is David.
		在 XML 中，文档中的空格不会被删节。
六、XML 元素
	1.什么是 XML 元素？
		XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。
		元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。
		<bookstore>
		<book category="CHILDREN">
		  <title>Harry Potter</title> 
		  <author>J K. Rowling</author> 
		  <year>2005</year> 
		  <price>29.99</price> 
		</book>
		<book category="WEB">
		  <title>Learning XML</title> 
		  <author>Erik T. Ray</author> 
		  <year>2003</year> 
		  <price>39.95</price> 
		</book>
		</bookstore> 
		在上例中，<bookstore> 和 <book> 都拥有元素内容，因为它们包含了其他元素。
		<author> 只有文本内容，因为它仅包含文本。
		在上例中，只有 <book> 元素拥有属性 (category="CHILDREN")。
	2.XML 命名规则
		XML 元素必须遵循以下命名规则：
		名称可以含字母、数字以及其他的字符
		名称不能以数字或者标点符号开始
		名称不能以字符 “xml”（或者 XML、Xml）开始
		名称不能包含空格
		可使用任何名称，没有保留的字词。
	3.最佳命名习惯
		使名称具有描述性。使用下划线的名称也很不错。
		名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。
		避免 "-" 字符。如果您按照这样的方式进行命名："first-name"，一些软件会认为你需要提取第一个单词。
		避免 "." 字符。如果您按照这样的方式进行命名："first.name"，一些软件会认为 "name" 是对象 "first" 的属性。
		避免 ":" 字符。冒号会被转换为命名空间来使用（稍后介绍）。
		XML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，
		即使用数据库的名称规则来命名 XML 文档中的元素。
		非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。
	4.XML 元素是可扩展的
		XML 元素是可扩展，以携带更多的信息。
		请看下面这个 XML 例子：
		<note>
		<to>George</to>
		<from>John</from>
		<body>Don't forget the meeting!</body>
		</note> 
		让我们设想一下，我们创建了一个应用程序，可将 <to>、<from> 以及 <body> 元素提取出来，并产生以下的输出：
		MESSAGE
		To: George
		From: John

		Don't forget the meeting!
		想象一下，之后这个 XML 文档作者又向这个文档添加了一些额外的信息：
		<note>
		<date>2008-08-08</date>
		<to>George</to>
		<from>John</from>
		<heading>Reminder</heading>
		<body>Don't forget the meeting!</body>
		</note>
		那么这个应用程序会中断或崩溃吗？
		不会。这个应用程序仍然可以找到 XML 文档中的 <to>、<from> 以及 <body> 元素，并产生同样的输出。
		XML 的优势之一，就是可以经常在不中断应用程序的情况进行扩展。

七、XML 属性
	1.XML 属性
		从 HTML，你会回忆起这个：<img src="computer.gif">。"src" 属性提供有关 <img> 元素的额外信息。
		在 HTML 中（以及在 XML 中），属性提供有关元素的额外信息：
		<img src="computer.gif">
		<a href="demo.asp"> 
		属性通常提供不属于数据组成部分的信息。在下面的例子中，文件类型与数据无关，
		但是对需要处理这个元素的软件来说却很重要：
		<file type="gif">computer.gif</file>
	2.XML 属性必须加引号
		属性值必须被引号包围，不过单引号和双引号均可使用。比如一个人的性别，person 标签可以这样写：
		<person sex="female">
		或者这样也可以：
		<person sex='female'>
		注释：如果属性值本身包含双引号，那么有必要使用单引号包围它，就像这个例子：
		<gangster name='George "Shotgun" Ziegler'>
		或者可以使用实体引用：
		<gangster name="George &quot;Shotgun&quot; Ziegler">
	3.XML 元素 vs. 属性
		请看这些例子：
		<person sex="female">
		  <firstname>Anna</firstname>
		  <lastname>Smith</lastname>
		</person> 

		<person>
		  <sex>female</sex>
		  <firstname>Anna</firstname>
		  <lastname>Smith</lastname>
		</person> 
		在第一个例子中，sex 是一个属性。在第二个例子中，sex 则是一个子元素。两个例子均可提供相同的信息。
		没有什么规矩可以告诉我们什么时候该使用属性，而什么时候该使用子元素。我的经验是在 
		HTML 中，属性用起来很便利，但是在 XML 中，您应该尽量避免使用属性。如果信息感觉起
		来很像数据，那么请使用子元素吧。
	4.我最喜欢的方式
		下面的三个 XML 文档包含完全相同的信息：
		第一个例子中使用了 date 属性：
		<note date="08/08/2008">
		<to>George</to>
		<from>John</from>
		<heading>Reminder</heading>
		<body>Don't forget the meeting!</body>
		</note> 
		第二个例子中使用了 date 元素：
		<note>
		<date>08/08/2008</date>
		<to>George</to>
		<from>John</from>
		<heading>Reminder</heading>
		<body>Don't forget the meeting!</body>
		</note> 
		第三个例子中使用了扩展的 date 元素（这是我的最爱）：
		<note>
		<date>
		  <day>08</day>
		  <month>08</month>
		  <year>2008</year>
		</date>
		<to>George</to>
		<from>John</from>
		<heading>Reminder</heading>
		<body>Don't forget the meeting!</body>
		</note>
	5.避免 XML 属性？
		因使用属性而引起的一些问题：
		属性无法包含多重的值（元素可以）
		属性无法描述树结构（元素可以）
		属性不易扩展（为未来的变化）
		属性难以阅读和维护
		请尽量使用元素来描述数据。而仅仅使用属性来提供与数据无关的信息。
		不要做这样的蠢事（这不是 XML 应该被使用的方式）：
		<note day="08" month="08" year="2008"
		to="George" from="John" heading="Reminder" 
		body="Don't forget the meeting!">
		</note>
	6.针对元数据的 XML 属性
		有时候会向元素分配 ID 引用。这些 ID 索引可用于标识 XML 元素，它起作用的方式与 
		HTML 中 ID 属性是一样的。这个例子向我们演示了这种情况：
		<messages>
		  <note id="501">
			<to>George</to>
			<from>John</from>
			<heading>Reminder</heading>
			<body>Don't forget the meeting!</body>
		  </note>
		  <note id="502">
			<to>John</to>
			<from>George</from>
			<heading>Re: Reminder</heading>
			<body>I will not</body>
		  </note> 
		</messages>
		上面的 ID 仅仅是一个标识符，用于标识不同的便签。它并不是便签数据的组成部分。
		在此我们极力向您传递的理念是：元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


