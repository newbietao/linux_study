				js模块化开发
一、require.js
	1.作用：
		RequireJS是一个非常小巧的JavaScript模块载入框架，是AMD规范最好的实现者之一。
		最新版本的RequireJS压缩后只有14K，堪称非常轻量。它还同时可以和其他的框架协同工作，
		使用RequireJS必将使您的前端代码质量得以提升。
	2.使用方法
		正常编写方式
		index.html:
		<!DOCTYPE html>
		<html>
			<head>
				<script type="text/javascript" src="a.js"></script>
			</head>
			<body>
			  <span>body</span>
			</body>
		</html>
		a.js:
		function fun1(){
		  alert("it works");
		}

		fun1();
		可能你更喜欢这样写
		(function(){
			function fun1(){
			  alert("it works");
			}

			fun1();
		})()
		第二种方法使用了块作用域来申明function防止污染全局变量，本质还是一样的，
		当运行上面两种例子时不知道你是否注意到，alert执行的时候，html内容是一片空白的，
		即<span>body</span>并未被显示，当点击确定后，才出现，这就是JS阻塞浏览器渲染导致的结果。
		requirejs写法
		当然首先要到requirejs的网站去下载js -> requirejs.org
		index.html:
		<!DOCTYPE html>
		<html>
			<head>
				<script type="text/javascript" src="require.js"></script>
				<script type="text/javascript">
				    require(["a"]);
				</script>
			</head>
			<body>
			  <span>body</span>
			</body>
		</html>
		a.js:
		define(function(){
			function fun1(){
			  alert("it works");
			}

			fun1();
		})
		浏览器提示了"it works"，说明运行正确，但是有一点不一样，这次浏览器并不是一片空白，
		body已经出现在页面中，目前为止可以知道requirejs具有如下优点：
		1）防止js加载阻塞页面渲染
		2）使用程序调用的方式加载js，防出现如下丑陋的场景
		<script type="text/javascript" src="a.js"></script>
		<script type="text/javascript" src="b.js"></script>
		<script type="text/javascript" src="c.js"></script>
		<script type="text/javascript" src="d.js"></script>
		<script type="text/javascript" src="e.js"></script>
		<script type="text/javascript" src="f.js"></script>
		<script type="text/javascript" src="g.js"></script>
		<script type="text/javascript" src="h.js"></script>
		<script type="text/javascript" src="i.js"></script>
		<script type="text/javascript" src="j.js"></script>
		
	3.基本api
	
		require会定义三个变量：define,require,requirejs，其中require === requirejs，
		一般使用require更简短
			define 从名字就可以看出这个api是用来定义一个模块
			require 加载依赖模块，并执行加载完后的回调函数
			前一篇中的a.js：
			define(function(){
				function fun1(){
				  alert("it works");
				}

				fun1();
			})
			通过define函数定义了一个模块，然后再页面中使用：
			require(["js/a"]);
			来加载该模块(注意require中的依赖是一个数组，即使只有一个依赖，你也必须使用数组
			来定义)，requir API的第二个参数是callback，一个function，是用来处理加载完
			毕后的逻辑，如：
			require(["js/a"],function(){
				alert("load finished");
			})
			
	4.加载文件
		之前的例子中加载模块都是本地js，但是大部分情况下网页需要加载的JS可能来自本地服务器、
		其他网站或CDN，这样就不能通过这种方式来加载了，我们以加载一个jquery库为例：
		require.config({
			paths : {
				"jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"]   
			}
		})
		require(["jquery","js/a"],function($){
			$(function(){
				alert("load finished");  
			})
		})
		这边涉及了require.config，require.config是用来配置模块加载位置，简单点说就是
		给模块起一个更短更好记的名字，比如将百度的jquery库地址标记为jquery，这样在require
		时只需要写["jquery"]就可以加载该js，本地的js我们也可以这样配置：
		require.config({
			paths : {
				"jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"],
				"a" : "js/a"   
			}
		})
		require(["jquery","a"],function($){
			$(function(){
				alert("load finished");  
			})
		})
		通过paths的配置会使我们的模块名字更精炼，paths还有一个重要的功能，就是可以配置
		多个路径，如果远程cdn库没有加载成功，可以加载本地的库，如：
		require.config({
			paths : {
				"jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery", "js/jquery"],
				"a" : "js/a"   
			}
		})
		require(["jquery","a"],function($){
			$(function(){
				alert("load finished");  
			})
		})
		这样配置后，当百度的jquery没有加载成功后，会加载本地js目录下的jquery
		在使用requirejs时，加载模块时不用写.js后缀的，当然也是不能写后缀
		上面例子中的callback函数中发现有$参数，这个就是依赖的jquery模块的输出变量，
		如果你依赖多个模块，可以依次写入多个参数来使用：
		require(["jquery","underscore"],function($, _){
			$(function(){
				_.each([1,2,3],alert);
			})
		})
		如果某个模块不输出变量值，则没有，所以尽量将输出的模块写在前面，防止位置错乱引发误解
	5.全局配置
		全局配置
		上面的例子中重复出现了require.config配置，如果每个页面中都加入配置，必然显得十分
		不雅，requirejs提供了一种叫"主数据"的功能，我们首先创建一个main.js：
		require.config({
			paths : {
				"jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery", "js/jquery"],
				"a" : "js/a"   
			}
		})
		然后再页面中使用下面的方式来使用requirejs：
		<script data-main="js/main" src="js/require.js"></script>
		解释一下，加载requirejs脚本的script标签加入了data-main属性，这个属性指定的js将在
		加载完reuqire.js后处理，我们把require.config的配置加入到data-main后，就可以使
		每一个页面都使用这个配置，然后页面中就可以直接使用require来加载所有的短模块名
		data-main还有一个重要的功能，当script标签指定data-main属性时，require会默认的
		将data-main指定的js为根路径，是什么意思呢？如上面的data-main="js/main"设定后
		，我们在使用require(['jquery'])后(不配置jquery的paths)，require会自动加载
		js/jquery.js这个文件，而不是jquery.js，相当于默认配置了：
		require.config({
			baseUrl : "js"
		})
二、sea.js
	1.sea.js的原则
		使用SeaJS开发JavaScript的基本原则就是：一切皆为模块。引入SeaJS后，编写JavaScript
		代码就变成了编写一个又一个模块，SeaJS中模块的概念有点类似于面向对象中的类——模块可以
		拥有数据和方法，数据和方法可以定义为公共或私有，公共数据和方法可以供别的模块调用。
		另外，每个模块应该都定义在一个单独js文件中，即一个对应一个模块。
	2.模块的定义和使用
	  1）模块定义函数define
		SeaJS中使用“define”函数定义一个模块，define可以接收三个参数：
		如果只有一个参数，则赋值给factory。
		如果有两个参数，第二个赋值给factory；第一个如果是array则赋值给deps，否则赋值给id。
		如果有三个参数，则分别赋值给id，deps和factory。
		但是，包括SeaJS的官方示例在内几乎所有用到define的地方都只传递一个工厂函数进去，
		类似与如下代码：

		define(function(require, exports, module) {
			//code of the module...
		});
		
		个人建议遵循SeaJS官方示例的标准，用一个参数的define定义模块。那么id和deps会怎么处理呢？
		id是一个模块的标识字符串，define只有一个参数时，id会被默认赋值为此js文件的绝对路径。
		如example.com下的a.js文件中使用define定义模块，则这个模块的ID会赋值为
		 http://example.com/a.js ，没有特别的必要建议不要传入id。
		 deps一般也不需要传入，需要用到的模块用require加载即可。
	  2）工厂函数factory解析
		工厂函数是模块的主体和重点。在只传递一个参数给define时（推荐写法），这个参数就是工
		厂函数，此时工厂函数的三个参数分别是：
		1.require——模块加载函数，用于记载依赖模块。
		2.exports——接口点，将数据或方法定义在其上则将其暴露给外部调用。
		3.module——模块的元数据。
		这三个参数可以根据需要选择是否需要显示指定。
		下面说一下module。module是一个对象，存储了模块的元信息，具体如下：
		1.module.id——模块的ID。
		2.module.dependencies——一个数组，存储了此模块依赖的所有模块的ID列表。
		3.module.exports——与exports指向同一个对象。
	  3）三种编写模块的模式
		第一种定义模块的模式是基于exports的模式：
		复制代码 代码如下:

		define(function(require, exports, module) {
			var a = require('a'); //引入a模块
			var b = require('b'); //引入b模块

			var data1 = 1; //私有数据

			var func1 = function() { //私有方法
				return a.run(data1);
			}

			exports.data2 = 2; //公共数据

			exports.func2 = function() { //公共方法
				return 'hello';
			}
		});
		上面是一种比较“正宗”的模块定义模式。除了将公共数据和方法附加在exports上，
		也可以直接返回一个对象表示模块，如下面的代码与上面的代码功能相同：

		define(function(require) {
			var a = require('a'); //引入a模块
			var b = require('b'); //引入b模块

			var data1 = 1; //私有数据

			var func1 = function() { //私有方法
				return a.run(data1);
			}

			return {
				data2: 2,
				func2: function() {
				    return 'hello';
				}
			};
		});
		如果模块定义没有其它代码，只返回一个对象，还可以有如下简化写法：
		复制代码 代码如下:
		define({
			data: 1,
			func: function() {
				return 'hello';
			}
		});

		第三种方法对于定义纯JSON数据的模块非常合适。
	3.模块的载入和引用
	4.SeaJS的全局配置
三、总结：























