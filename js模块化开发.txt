				js模块化开发
一、require.js
	1.作用：
		RequireJS是一个非常小巧的JavaScript模块载入框架，是AMD规范最好的实现者之一。
		最新版本的RequireJS压缩后只有14K，堪称非常轻量。它还同时可以和其他的框架协同工作，
		使用RequireJS必将使您的前端代码质量得以提升。
	2.使用方法
		正常编写方式
		index.html:
		<!DOCTYPE html>
		<html>
			<head>
				<script type="text/javascript" src="a.js"></script>
			</head>
			<body>
			  <span>body</span>
			</body>
		</html>
		a.js:
		function fun1(){
		  alert("it works");
		}

		fun1();
		可能你更喜欢这样写
		(function(){
			function fun1(){
			  alert("it works");
			}

			fun1();
		})()
		第二种方法使用了块作用域来申明function防止污染全局变量，本质还是一样的，
		当运行上面两种例子时不知道你是否注意到，alert执行的时候，html内容是一片空白的，
		即<span>body</span>并未被显示，当点击确定后，才出现，这就是JS阻塞浏览器渲染导致的结果。
		requirejs写法
		当然首先要到requirejs的网站去下载js -> requirejs.org
		index.html:
		<!DOCTYPE html>
		<html>
			<head>
				<script type="text/javascript" src="require.js"></script>
				<script type="text/javascript">
				    require(["a"]);
				</script>
			</head>
			<body>
			  <span>body</span>
			</body>
		</html>
		a.js:
		define(function(){
			function fun1(){
			  alert("it works");
			}

			fun1();
		})
		浏览器提示了"it works"，说明运行正确，但是有一点不一样，这次浏览器并不是一片空白，
		body已经出现在页面中，目前为止可以知道requirejs具有如下优点：
		1）防止js加载阻塞页面渲染
		2）使用程序调用的方式加载js，防出现如下丑陋的场景
		<script type="text/javascript" src="a.js"></script>
		<script type="text/javascript" src="b.js"></script>
		<script type="text/javascript" src="c.js"></script>
		<script type="text/javascript" src="d.js"></script>
		<script type="text/javascript" src="e.js"></script>
		<script type="text/javascript" src="f.js"></script>
		<script type="text/javascript" src="g.js"></script>
		<script type="text/javascript" src="h.js"></script>
		<script type="text/javascript" src="i.js"></script>
		<script type="text/javascript" src="j.js"></script>
		
	3.基本api
	
		require会定义三个变量：define,require,requirejs，其中require === requirejs，
		一般使用require更简短
			define 从名字就可以看出这个api是用来定义一个模块
			require 加载依赖模块，并执行加载完后的回调函数
			前一篇中的a.js：
			define(function(){
				function fun1(){
				  alert("it works");
				}

				fun1();
			})
			通过define函数定义了一个模块，然后再页面中使用：
			require(["js/a"]);
			来加载该模块(注意require中的依赖是一个数组，即使只有一个依赖，你也必须使用数组
			来定义)，requir API的第二个参数是callback，一个function，是用来处理加载完
			毕后的逻辑，如：
			require(["js/a"],function(){
				alert("load finished");
			})
			
	4.加载文件
		之前的例子中加载模块都是本地js，但是大部分情况下网页需要加载的JS可能来自本地服务器、
		其他网站或CDN，这样就不能通过这种方式来加载了，我们以加载一个jquery库为例：
		require.config({
			paths : {
				"jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"]   
			}
		})
		require(["jquery","js/a"],function($){
			$(function(){
				alert("load finished");  
			})
		})
		这边涉及了require.config，require.config是用来配置模块加载位置，简单点说就是
		给模块起一个更短更好记的名字，比如将百度的jquery库地址标记为jquery，这样在require
		时只需要写["jquery"]就可以加载该js，本地的js我们也可以这样配置：
		require.config({
			paths : {
				"jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"],
				"a" : "js/a"   
			}
		})
		require(["jquery","a"],function($){
			$(function(){
				alert("load finished");  
			})
		})
		通过paths的配置会使我们的模块名字更精炼，paths还有一个重要的功能，就是可以配置
		多个路径，如果远程cdn库没有加载成功，可以加载本地的库，如：
		require.config({
			paths : {
				"jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery", "js/jquery"],
				"a" : "js/a"   
			}
		})
		require(["jquery","a"],function($){
			$(function(){
				alert("load finished");  
			})
		})
		这样配置后，当百度的jquery没有加载成功后，会加载本地js目录下的jquery
		在使用requirejs时，加载模块时不用写.js后缀的，当然也是不能写后缀
		上面例子中的callback函数中发现有$参数，这个就是依赖的jquery模块的输出变量，
		如果你依赖多个模块，可以依次写入多个参数来使用：
		require(["jquery","underscore"],function($, _){
			$(function(){
				_.each([1,2,3],alert);
			})
		})
		如果某个模块不输出变量值，则没有，所以尽量将输出的模块写在前面，防止位置错乱引发误解
	5.全局配置
二、sea.js
三、总结：

