一、php环境的搭建及简介
	１．xammp（集成阿帕奇、ＰＨＰ、ＭｙＳＱＬ）
	２．ｐｈｐ服务器端语言
	３．ｐｈｐ的标记　<?php ?>
二、php基础语法
	１．变量：内存中存储临时数据的空间
		a.命名方法：$ + 字符串，
		b.弱类型语言：所以变量类型可以改变。变量类型和赋给他的值有关。
		$php = "string";//字符型
		$php = 1234;//整型
		c.必须以下划线或者字符开头，中间可以使用字符，数值，下划线，区别分大小写。
	２．可变变量：就是把一个变量的值作为另一个变量的名
		$var = "aaaa";
		$$var = "bbbb";
		echo $aaaa;//bbbb
	3.外部变量：$_GET[] $_POST[] $_REQUEST[]
	4.引用变量：就是将变量以传址的形式进行传递
		$aa = "111111111";
		$bb = &$aa;//;
		echo $aa;//1111111111
		$bb = "2222222";
		echo $aa;//22222222
	５．常量：值始终保持不变的单元
		常量的定义：define('常量名'，'值');
		常量区分大小写，命名建议大写，而且值必须是标量：string, int, float, bool.
		作用域：全局。
		系统常量：M_PI, PHP_OS, PHP_VERSION,　
	6.魔术常量
		__LINE__ :当前行数，　__FILE__:当前文件的路径　__FUNCTION__:　当前函数的
		__CLASS__:类名　__METHOD__ : 类名：：方法名
	７．变量、常量检测
		isset(变量名);//变量存在返回true,不存在返回false.
		defined(常量名);//常量存在返回true,不存在返回false.
三、数据类型
	１．php 类型
		标量类型：整形(int)、浮点型（flaot)、字符串(string)、布尔(boolean)
		符合类型：数组(array) 、　对象(object)
		其他类型：资源(resource) NULL
	2.整形、浮点型
		$num1 = 100;//整形
		$num2 = 0.1; //浮点型
	３.字符型
		$str = "string";//字符型
		单引号：单引号里面的引号只能是双引号或者是转义过的单引号，而且单引号里面不能其他的
		转义，单引号里面还不能识别变量，但是单引号的执行效率要比双引号的执行效率高。
		
		双引号：双引号里面的引号只能是单引号或者是转义过得双引号，双引号里面可以存放变量和
		其他转义符号，但是双引号里面的变量容易不被识别例如：
		$str = "string";
		$str1 = "123$str456";// 这样无法识别，因为php把$符号后面的都看成一个变量。
		$str1 = "123{$str}456";//这样就可以识别。
		定界符：
		<<<标识符
			ｓｔｒ
		标识符
	４．布尔型：TRUE FALSE
		为假的类型：
		１：FALSE 2:0 ３：0.0 4:空字符串　５：字符串０　６：NULL 7:空数组
	５．数组：由键值对组成的语言结构，可以使用print_r();输出数组。
		索引数组：就是指的是数组键是整数的数组，并且整数的顺序是从０开始依次类推。
			$arr = array("香蕉","苹果","鸭梨");
			$arr[０] //香蕉
			$arr[1]//苹果
			$arr[2]//鸭梨
		索引数组的赋值：
			a.直接变量名加[]
			$arr[0] = "苹果";
			b.使用array()建立一个空数组，使用=>符号分离键值进行赋值。
			$arr = array("0"=>"苹果","1"=>"香蕉","２"=>"鸭梨");
			c.使用array()建立一个空数组进行赋值。
			$arr = array("苹果","香蕉","鸭梨");
		索引数组元素的访问：
			索引数组直接使用数组变量加[下标]
			$arr = array("苹果","香蕉","鸭梨");
			$arr[1]//香蕉
			$arr[0]//苹果
		关联数组：指的是键是字符串的数组
			$arr = array(
				"apple" =>"苹果",
				"banana"=>"香蕉"
			);
		关联数组的赋值：
			$arr['apple'] = "苹果";
			$arr = array(
				"apple" =>"苹果",
				"banana"=>"香蕉"
			);
		访问关联数组：数组变量加['键']
	６．对象：具有一定属性和方法的集合。
	７．资源：外部文件、数据库资源、等等。
	８．数据类型判断
		gettype(变量，常量);返回值是数据类型，例如：array
		is_int() is_float() is_array() is_object() is_null() is_bool() is_resource()
		参数是变量或者是常量，返回值是bool值。
	９．数据类型转换
		自由转换：由于php是弱类型语言，所以只要改变变量值得类型，就可以改变变量的类型。
		强制转换：在变量前加(数据类型)，不作用于原变量，只生成新的结果
			$year = "2008年";
			$newyear = (int)$year;
		settype()：作用于原变量，改变原变量的数据类型。
			$aa = 11;//int
			settype($aa,"string");//string
		具体的转换函数：只能用于标量，不作用于原变量，只生成新的结果，intval();转换为整形，
		floatval();转换为浮点型，strval();转换为字符型。
		
四、运算符
	１．算数运算符
		加、减、乘、除、取余。
	２．递增、递减运算符
		$a = 11;
		$b = 22;
		$a = $a + $b;//与下面的等价
		$a += $b;
		$a = $a - $b;//与下面的等价
		$a -= $b;
		//自增(减)运算符
		$b = $a++;//等价于
		$b = $a;
		$a = $a+1;
	３．比较运算符 
		> 大于　<　小于　<= 小于等于　>= 大于等于　<> != 不等于　!== 不全等于
		== 等于　=== 全等于
	４．逻辑运算符
		与：&& /and ，运算符两边同时为真时，为真。
		或：|| / or　，运算符两边有一边为真时，为真。
		非：！/ not ，　当为真值时返回假值，假值时返回真值。
		异或：　xor ，　运算符两边只有一个值为真时，返回真，其他时都返回假值。
	５．其他运算符
		连接运算符：　. 　连接两个参数，形成新的字符串。
		　　　　　　　　　　　　.=  连接运算符，把右边的值连接到左边变量。
		赋值运算符：	=   把右边的值赋给左边变量。
		错误屏蔽符：　＠　放在函数、变量、常量前禁止显示错误的警告信息。不可放在条件语句中。
		三元表达式：　表达式１? 表达式２:表达式３，当表达式１成立时返回表达式２的值，否则返回
					表达式３的值。
	６．运算符短路：
		短路效果只有在逻辑运算符，与、或中存在，
		与：　表达式１　&& 表达式２　当表达式１为假时，表达式２就不会执行。
		或：　表达式１　|| 表达式２　当表达式１为真时，表达式２就不会执行。
五、流程控制语句
	１.if语句
		if(条件语句１){//条件１成立时执行，代码段１
			代码段１
		}elseif(条件语句２){//条件１不成立且条件２成立，执行代码段２
			代码段２
		}else{//条件１，２都不成立，执行代码段３
			代码段３
		}
	２．switch 语句
		根据不同的表达式匹配，执行不同的代码段。表达式一般为变量。
		switch(表达式){
			case 表达式１:
			代码段１;
			break;//如果不加break,会执行下面的所有语句。
			case 表达式２：
			代码段２;
			break;
			default:
			代码段３;
		}
	3.while语句
		while(条件语句){//当条件语句符合时，执行循环语句
			循环体。。。
		}
	４．do while语句，在判断条件语句前，就执行一次循环体。
		do{
			循环体；
		}while(条件表达式);
	5.for语句
		for(表达式１初始化值;表达式２条件判断语句;表达式３增量){
			循环体;
		}
		第一次执行：给循环变量赋初始值，检查是否符合循环条件，符合执行循环体，不符合退出循环，
		在执行循环增值。
		表达式１　＝》　表达式２　＝》　循环体　＝》　表达式３；
		以后的执行：直接检查是否符合循环条件，符合执行循环体，不符合退出循环，在执行循环
		表达式２　＝》　循环体　＝》表达式３；
		增值。
	６．其他的流程控制语句
		break int:跳出几层循环，跳出循环后就不在执行循环。
		continue int:跳出几层循环，跳出循环指的是跳出当前循环，跳出循环后还会进行下一次循环。
		exit、die:这两个效果相同，跳出当前的脚本。
六、函数：一部分可重复执行的代码段，多次执行一次编译。
	１.特点
		减少程序运行的复杂性
		提高程序的可靠性
		提高软件的开发效率
		提高程序的维护性
		提高程序的重复性
	２．语法
		function 函数名(参数１,参数２,参数３......){//函数的定义
			具体代码段....
			return 返回值
		}
		函数名(参数１,参数２,参数３......);//函数的调用
		函数可以在定义前调用。
	３．函数的检测
		function_exists(函数名);//返回值是bool值。
	４．函数的作用范围
		php函数的作用域，有块作用域的概念，函数内的作用域是局部作用域，不能和全局变量共享，
		函数内获取不到外部变量，全局也获取不到函数内的变量。可以使用　global关键字把函数内的
		变量声明为全局变量。
	５．静态变量
		使用static 关键字声明静态变量。
		在所有对函数调用中共享
		只用在第一次调用时赋值
		function static(){
			static $aa = 1;
			$aa++;
			echo $aa;
		}
		static();//2
		static();//3
		static();//4
	６．按值传递参数和按址传递参数
		函数调用时传递的参数，如果按值传递(就是直接以变量名传递)，在函数内无论怎么对参数进行
		操作，都不会影响到外部变量。
		如果按址传递，函数内的操作，就会影响到外部变量。
		function sayname($name){
			$name .= "你好";
			echo $name;
		}
		$name = "张三";
		sayname($name);
		echo $name;//张三
		sayname(&$name);
		echo $name;//张三你好
	７．任意数量的参数
		func_get_args() 接收一个数组，数组里面包含所有参数
		func_num_args() 返回一共有几个参数。
		func_get_arg(int) 返回第几个参数
		
		function test(){
			echo func_get_args();//["test1","test2","test3"]
			echo func_num_args();//3
			echo func_get_arg(2);//"test2"
		}
		test("test1","test2","test3");
	8.变量函数
		可以在变量后面加(),系统会查找与变量同名的函数，去执行。
		function test(){
			........
		}
		$func = "test";
		$func();//会执行test();
	9.递归调用
		在函数体内调用自身
		加上一个终止条件要不会陷入死循环。
		function add($num){
			if($num == 1){
				return 1;
			}else{
				return $num + add($num - 1);
			}
		
		}
	10.内部函数
		就是在函数体内部定义的函数。
	11.载入外部文件
		include(文件的路径)  	require(文件的路径) 载入文件
		include() ：如果载入的文件不存在，提示警告错误，程序还可以继续执行。
		require() : 如果载入文件不存在，会发生致命错误，程序不能继续执行。
		include_once() require_once() 只载入一次文件，如果文件已经载入就不再载入文件。

七、字符串处理函数
	１．strlen 字符串长度
		返回字符串长度　
		$str = "hello world!";
		strlen($str);//１２
	２．字符串空格
		trim 删除字符串左右空格
		ltrim 删除字符串左边空格
		rtrim 删除字符串右边空格
	３．字符创大小写的处理
		strtolower 将字符串转化为小写
		strtoupper 将字符串转化为大写
		ucfirst 字符串首字母大写
		ucwords 单词首字母大写
	４．字符串填充函数
		str_pad("字符串","填充后长度","填充内容","填充方向");
		填充方向：
			STR_PAD_BOTH;两侧都添加，多的在右边
			STR_PAD_LEFT; 左侧填充
			STR_PAD_RIGHT 右侧填充
		$str = "hello world";
		$newstr = str_pad($str,15,"+","STR_PAD_BOTH");
		echo $newstr; // ++hello world++
	5.字符串翻转函数
		strrev();
	6.md5加密
		md5();
	7.格式化金额字符串函数
		number_format("字符串","小数位数","小数点","千位分隔符");
		$num = "12345";
		echo number_format($num,3);//12,345.000
	8.字符串拆分成数组
		explode("拆分字符串的分割符","要拆分的字符串",返回数组的长度);
		$str = "hello world";
		$arr = explode(" ",$str);
	９．把数组组合成字符串
		implode("连接的字符串(可选)",数组);
		$arr = array("世界","亚洲","中国");
		$str = implode($arr);//世界亚洲中国
	10. 字符串输出
		echo  str1,str2......;//输出一个和多个字符串
		print str;//只能输出一个字符串
	11. 字符串截取
		substr("字符串",int(截取开始的位置),int(截取的长度));
		strchr("原始字符串","目标字符串") strstr();查找一个字符串在另一个字符串中第一次
		出现的，并返回字符串到结尾，如果没有结果返回false;
			$str = "hello world";
			$str1 = "world";
			$res = strstr($tr,$str1);//world
	
		stristr();功能和strstr相同，但是不区分大小写。
		
		strrchr();查找一个字符串在另一个字符串上最后出现的位置，并返回字符串到结尾。
	12. 字符串的位置
		strpos();查找一个字符串在另一个字符串上第一次出现的位置。
		stripos();查找一个字符串在另一个字符串上第一次出现的位置。不区分大小写。
		strrpos();查找一个字符串在另一个字符串上最后出现的位置。
		
	13. 字符串的拆分
		strtok("要分割的字符串","以什么分割");
			$str = "世界，亚洲，中国";
			$newstr = strtok($str,"，");//世界
			$newstr = strtok($str,"，");//亚洲
			$newstr = strtok($str,"，");//中国
		parse_str();把字符串截取为变量
			$str = "name=zhnagsan,age=13,sex=boy";
			parse_str($str);
			$name;//zhangsan
			$age;//13
			$sex;//boy
		chuck_split();按照制定长度拆分字符串
			$str = "hello world!";
			chuck_split($str,3);
			hel llo wor ld!
	14.	字符串替换函数
		str_replace("替换后的字符串","要替换的字符串","原字符串",$num);//替换字符串或数组
		str_ieplace();//功能同上，不区分大小写,第四个参数可以统计替换次数
			$str = "hello world";
			$newstr = str_replace("H","h",$str);//Hello world
			$arr1 = array("H","W");
			$arr2 = array("h","w");
			$newstr = str_replace($arr1,$arr2,$str);//Hello World
		strtr();替换字符串中的任意字符。
			$str = "hello world";
			$newstr = strtr($str,"hw","HW");//Hello World
			$arr = array("h"=>"H","w"=>"W");
			$newstr = strtr($str,$arr);//Hello World
	15. 字符串比较函数
		strcmp();比较字符串，如果相同返回０，如果字符串１＜字符串２返回-1，否则返回１．
		strcasecmp();不区分大小写的字符串比较。
		strnatcmp();按自然数进行字符串比较
		strncmp();指定位置进行字符串比较
		similar_text();比较两个字符串有多少个字符相等，第三个参数返回一个变量，为两个字符串
		相似的百分比。
	16. 字符串统计函数
		substr_count(str,str,pos,len);查找一个字符串在另一个字符串中出现的次数，
		可以指定起始位置，和查找长度。
			$str = "hello world";
			substr_count($str,"l");//3
	17.	字符串处理函数
		parse_url 解析url，返回其组成部分
		
		urlencode url编码
		urldecode url对已经编码的进行解码
		
		htmlentities 将字符串转化为ＨＴＭＬ实体
			参数１：操作的内容
			参数２：转换规则
				　　　ENT_COMPAT:只转换双引号
				　　　ENT_QUOTES:转换单双引号
				　　　ENT_NOQUOTES:不转换单双引号
	18. 字符串转义处理
		addslashes();在字符串中需要转义的字符前添加反斜杠进行转义。
		stripslashes();将转移的字符前的反斜杠删除。
		get_magic_quots_gpc 后的字符串中是否开启自动转义。
	19.资源数据转义
		get_magic_quotes_runtime(); 获得外部文件及数据资料时是否进行转义
		set_magic_quotes_runtiime();设置获得外部文件及数据资料时是否进行转义
		strip_tags() 去除HTML XML php的标签。
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				　　　














		
		
			
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
