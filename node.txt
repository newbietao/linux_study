一、原生node
	1.第一个node程序：hello node
		打开终端  输入node  回车  console.log("hello world");
		hantao@:~$ node
		> console.log("hello world");
		hello world
	2.搭建一个服务器
		a.引入http模块
			var http = require("http");
		b.创建服务器
			var server = http.createServer(calback);
		c.监听端口
			server.listen(3000,hostname,callback);
		d.完整代码
			var http = require("http");
			var port = 3000;
			var hostname = "loaclhost";
			var server = http.createServer(function(req,res){
				res.statusCode = 200;
				res.setHeader("Content-Type","text/plain");
				res.end("hello world");
			});
			server.listen(port,hostname,function(){
				console.log("the server is runing in:"+hostname+":"+port);
			});
	3.npm使用
		a.npm简介
			npm是随同nodejs一起安装的包管理工具，能解决node代码部署的很多问题
			常见的使用场景有以下几种：
			。允许用户从NPM服务器下载别人编写的第三方包到本地使用。
			。允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。
			。允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。
			可以通过npm -v 来查看版本信息
			npm install npm -a 来更新npm
		b.使用npm安装模块
			$ npm install <Module Name>
			安装express：
			npm install express
			安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此
			在代码中只需要通过 require('express') 的方式就好，无需指定第三方包路径。
			var express = require("express");
		c.全局安装、本地安装
			npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，
			差别只是有没有-g而已，比如：
			npm install express -g//全局安装
			npm install express //本地安装
			$ npm ls -g//查看全局安装包
		d.使用 package.json
			package.json 位于模块的目录下，用于定义包的属性。
			package.json的常见属性
			name - 包名。
			version - 包的版本号。
			description - 包的描述。
			homepage - 包的官网 url 。
			author - 包的作者姓名。
			contributors - 包的其他贡献者姓名。
			dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖
			包安装在 node_module 目录下。
			repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。
			main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，
			如果你包的名字叫 express，然后用户安装它，然后require("express")。
			keywords - 关键字
		e.npm的常见，命令
			$ npm uninstall express//卸载模块
			$ npm update express//更新模块
			$ npm search express//查找模块
		f.使用淘宝 NPM 镜像
			$ npm install -g cnpm --registry=https://registry.npm.taobao.org
			$ cnpm install [name]
	4.Node.js REPL(交互式解释器)
		Node.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，
		类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，
		并接收系统的响应。
		Node 自带了交互式解释器，可以执行以下任务：
			读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。
			执行 - 执行输入的数据结构
			打印 - 输出结果
			循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。
			在终端输入node回车
			$ node
			> 
		a.简单的表达式
			$ node
			> 1 +4
			5
			> 5 / 2
			2.5
			> 3 * 6
			18
			> 4 - 1
			3
			> 1 + ( 2 * 3 ) - 4
			3
			>
		b.使用变量
			你可以将数据存储在变量中，并在你需要的使用它。
			变量声明需要使用 var 关键字，如果没有使用 var 关键字变量会直接打印出来。
			使用 var 关键字的变量可以使用 console.log() 来输出变量。

			$ node
			> x = 10
			10
			> var y = 10
			undefined
			> x + y
			20
			> console.log("Hello World")
			Hello World
			undefined
			> console.log("www.runoob.com")
			www.runoob.com
			undefined
		c.多行表达式
			Node REPL 支持输入多行表达式，这就有点类似 JavaScript。
			接下来让我们来执行一个 do-while 循环：
			$ node
			> var x = 0
			undefined
			> do {
			... x++;
			... console.log("x: " + x);
			... } while ( x < 5 );
			x: 1
			x: 2
			x: 3
			x: 4
			x: 5
			undefined
			>
		d.下划线(_)变量
			你可以使用下划线(_)获取表达式的运算结果：
			$ node
			> var x = 10
			undefined
			> var y = 20
			undefined
			> x + y
			30
			> var sum = _
			undefined
			> console.log(sum)
			30
			undefined
			>
		e.REPL 命令
			ctrl + c - 退出当前终端。
			ctrl + c 按下两次 - 退出 Node REPL。
			ctrl + d - 退出 Node REPL.
			向上/向下 键 - 查看输入的历史命令
			tab 键 - 列出当前命令
			.help - 列出使用命令
			.break - 退出多行表达式
			.clear - 退出多行表达式
			.save filename - 保存当前的 Node REPL 会话到指定文件
			.load filename - 载入当前 Node REPL 会话的文件内容。
		f.退出REPL
			前面我们已经提到按下两次 ctrl + c 建就能退出 REPL:
			$ node
			>
			(^C again to quit)
			>
	5.nodejs的回调
		Node.js 异步编程的直接体现就是回调。
		异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。
		回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都
		支持回调函数。
		例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容
		作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大
		提高了 Node.js 的性能，可以处理大量的并发请求。
		a.阻塞示例：
			function fun1(){
				console.log("fun1");
			}
			function fun2(){
				console.log("fun2");
			}
			function fun3(){
				console.log("fun3");
			}
			fun1();
			fun2();
			fun3();
			输出结果：
			fun1
			fun2
			fun3
		b.非阻塞示例：
			function fun1(fun2){
				console.log("fun1");
				setTimeout(fun2,500);
			}
			function fun2(){
				console.log("fun2");
			}
			function fun3(){
				console.log("fun3");
			}
			fun1(fun2);
			fun3();
			输出结果：
			fun1
			fun3
			fun2
		因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，
		我们就需要写在回调函数内。
	6.node的模块系统：
		module对象是模块系统的核心，require和exports是它的两个属性，exports是模块的
		公开接口，require是模块的请求接口。在node中一个node.js文件就是一个模块。
		a.创建模块
			1）首先创建一个main.js,代码如下：
				var hello = require("./hello");
				hello.world();
			2）创建一个hello.js,代码如下：
				exports.world = function(){
					console.log("hello world");
				};
			3）$ node main.js 会输出hello world
		b.代码分析：
			main.js:require()函数是加载模块，./代表同级目录，hello：代表hello.js
			js文件可以省略后缀。
			hello.js:exports.world是将world函数暴落给模块系统。
		c.为一个对象创建模块
			我们在创建一个sayhello.js,代码：
			funtion hello(){
				var name = "";
				this.setnaem = function(sname){
					this.name  = sname;
				};
				this.sayhello = function(){
					console.log("hello "+this.name);
				};
				module.exports = hello;
			
			}
			main.js增加代码：
				var say = require("./sayhello");
				var sayhello = new say();
				sayhello.setname("hantao");
				sayhello.sayhello();
		7.node 事件循环
			Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。
			Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数
			调用，并处理并发。
			Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。
			Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，
			每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.
			a.事件驱动程序
				Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行
				处理，然后去服务下一个web请求。
				
				当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。
				
				这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何
				读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）
				
				在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。
				
				Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 
				EventEmitter 类来绑定和监听事件，如下实例：
				// 引入 events 模块
				var events = require('events');
				// 创建 eventEmitter 对象
				var eventEmitter = new events.EventEmitter();
				// 绑定事件及事件的处理程序
				eventEmitter.on('eventName', eventHandler);
				// 触发事件
				eventEmitter.emit('eventName');
				实例：
				var events = require("events");
				var eventEmitter = new events.EventEmitter();
				eventEmitter.on("event_name",callback);
				eventEmitter.emit("event_name");
				function callback(){
					console.log("some event emit");
				}
			b.Node 应用程序是如何工作的？
				node 的程序是，异步操作，事件触发回调函数。一下面例子说明：
				
				创建一个 input.txt ,文件内容如下：
				菜鸟教程官网地址：www.runoob.com
				
				创建 main.js 文件，代码如下：
				var fs = require("fs");

				fs.readFile('input.txt', function (err, data) {
				   if (err){
					  console.log(err.stack);
					  return;
				   }
				   console.log(data.toString());
				});
				console.log("程序执行完毕");
				
				以上程序中 fs.readFile() 是异步函数用于读取文件。
				如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。
				如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出。
				执行以上代码，执行结果如下：
				
				程序执行完毕
				菜鸟教程官网地址：www.runoob.com
				
				接下来我们删除 input.txt 文件，执行结果如下所示：
				
				程序执行完毕
				Error: ENOENT, open 'input.txt'
				
				因为文件 input.txt 不存在，所以输出了错误信息。
				
		8.Node.js EventEmitter
			Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。
			Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时
			分发一个事件， 一个fs.readStream对象会在文件被打开的时候发出一个事件。
			所有这些产生事件的对象都是 events.EventEmitter 的实例。
			a.EventEmitter类 
				events 模块只提供了一个对象： events.EventEmitter。EventEmitter 
				的核心就是事件触发与事件监听器功能的封装。你可以通过require("events");
				来访问该模块。
				var events = require("events");//加载events模块
				var eventEmitter = new evevts.EventEmitter();
				//实例化EventEmiter对象
			b.EventEmitter使用的综合实例：
				var events = require("events");
				var eventEmitter = new events.EventEmitter();
				eventEmiter.on("event1",callback1);
				setTimeout(function(){
					eventEmitter.emit("event1",argu1,argu2);
				},1000);
				eventEmitter.on("event2",callback2);
				eventEmitter.on("event2",callback3);
				eventEmitter.emit("event2");
				console.log("程序执行完毕");
				function callback1(argu1,argu2){
					console.log(argu1+":"+argu2);
				}
				function callback2(){
					console.log("callback2");
				}
				function callback3(){
					console.log("callback3");
				}
				
				EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，
				通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。
				
				当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数
				参数传递。

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
