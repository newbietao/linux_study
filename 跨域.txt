一、xampp如何配置虚拟域名
	1.先安装xampp或者lampp，注意不要开启
	2.找到你的xampp安装目录，依次找到下面的目录：
	apache目录--conf目录--extra目录--httpd-vhosts.conf文件，使用编辑器打开
	3.把下面代码加到httpd-vhosts.conf文件中
		<VirtualHost *:80>
		 ServerName www.xxxxx.com
		 DocumentRoot "项目的路径，要求是绝对路径"
		<Directory "D:项目的路径，要求是绝对路径"> 
		 Options FollowSymLinks IncludesNOEXEC Indexes
		 DirectoryIndex index.html index.htm index.php
		 AllowOverride all 
		 Order Deny,Allow 
		 Allow from all 
		 Require all granted
		</Directory>
		</VirtualHost>
<VirtualHost *:80>
 ServerName www.a.com
 DocumentRoot "/opt/lampp/htdocs/servertest/ajax/jsonp/a"
<Directory "/opt/lampp/htdocs/servertest/ajax/jsonp/a"> 
 Options FollowSymLinks IncludesNOEXEC Indexes
 DirectoryIndex index.html index.htm index.php
 AllowOverride all 
 Order Deny,Allow 
 Allow from all 
 Require all granted
</Directory>
</VirtualHost>
<VirtualHost *:80>
 ServerName www.b.com
 DocumentRoot "/opt/lampp/htdocs/servertest/ajax/jsonp/b"
<Directory "/opt/lampp/htdocs/servertest/ajax/jsonp/b"> 
 Options FollowSymLinks IncludesNOEXEC Indexes
 DirectoryIndex index.html index.htm index.php
 AllowOverride all 
 Order Deny,Allow 
 Allow from all 
 Require all granted
</Directory>
</VirtualHost>
	4.修改host文件
		a.windows系统：打开C盘，依次找到下面的目录：windows目录--system32目录
		--drivers目录--etc目录--找到hosts文件，使用编辑器打开；
		b.linux：/etc/hosts文件
		c.在文件中加入：127.0.0.1 www.xxxxxx.com //和你的虚拟域名相对应
二、js中几种实用的跨域方法原理详解
	这里说的js跨域是指通过js在不同的域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，
	或者通过js获取页面中不同域的框架中(iframe)的数据。只要协议、域名、端口有任何一个不同，
	都被当作是不同的域。
	1.通过jsonp跨域：json padding
		下面我们结合代码进行讲解：
		www.a.com/index.html:
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>Document</title>
		</head>
		<body>
	
			<script>
				function aa(data){
					console.log(data);
				}
			</script>
			<script src="http://www.b.com/test.php?callback=aa"></script>
		</body>
		</html>
		在index.html文件中使用script标签引入www.b.com/test.php并把回调函数作为参数
		传递给www.b.com/test.php。
		www.b.com/test.php:
		<?php
	
			$callback = $_GET["callback"];
			$data = "{
				'name':'hantao',
				'age':23,
				'sex':'man'
			}";
			echo $callback."(".$data.")";

		?>
		www.b.com/test.php通过get方法接收到参数并把回调函数和数据一同返回给www.a.com\
		index.html.最后www.a.com/index.html的形式如下：
		www.a.com/index.html:
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>Document</title>
		</head>
		<body>
	
			<script>
				function aa(data){
					console.log(data);
				}
			</script>
			<script>
				aa({name: "hantao", age: 23, sex: "man"});
			</script>
		</body>
		</html>
		
		这样jsonp的原理就很清楚了，通过script标签引入一个js文件，这个js文件载入成功后
		会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。所以
		jsonp是需要服务器端的页面进行相应的配合的。

		知道jsonp跨域的原理后我们就可以用js动态生成script标签来进行跨域操作了，而不用
		特意的手动的书写那些script标签。如果你的页面使用jquery，那么通过它封装的方法就
		能很方便的来进行jsonp操作了。
		<script>
			$(function(){
				$.getJSON("http://www.b.com/test.php?callback=?",function(data){
						console.log(data);
				});
			});

		</script>
	2.使用window.name来进行跨域
		window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,
		窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有
		读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页
		面的载入而进行重置。
		
		window.name的值只能是字符串的形式，这个字符串的大小最大能允许2M左右甚至更大的
		一个容量，具体取决于不同的浏览器，但一般是够用了。
		示例一：
			www.a.com/window_name1.html:
			
			<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<title>Document</title>
			</head>
			<body>
				11111111
				<script>
					window.name = "我是界面一设置的内容";
					setTimeout(function(){
						window.location = "http://www.b.com/window_name2.html";
					},3000);

				</script>
			</body>
			</html>
			
			www.b.com/window_name2.html:
			
			<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<title>Document</title>
			</head>
			<body>
				2222222222
				<script>
					setTimeout(function(){
						alert(window.name);
					},3000);
		

				</script>
			</body>
			</html>
			跳转后最终弹出内容是：我是界面一设置的内容
			
			示例二：不跳转也能获得数据
			a.html页面中使用一个隐藏的iframe来充当一个中间人角色，由iframe去获取
			data.html的数据，然后a.html再去得到iframe获取到的数据。

			充当中间人的iframe想要获取到data.html的通过window.name设置的数据，只需要
			把这个iframe的src设为www.b.com/data.html就行了。然后a.html想要得
			到iframe所获取到的数据，也就是想要得到iframe的window.name的值，还必须把这
			个iframe的src设成跟a.html页面同一个域才行，不然根据前面讲的同源策略，a.html
			是不能访问到iframe里的window.name属性的。这就是整个跨域过程。
			
				www.a.com/a.html:
				
				<!DOCTYPE html>
				<html lang="en">
				<head>
					<meta charset="UTF-8">
					<title>Document</title>
					<script>
					   function getdata(){
					   	var iframe = document.getElementById("ifra");
					   	iframe.src = "b.html";
						iframe.onload = function(){
							var data = iframe.contentWindow.name;
							alert(data);
						};
		
					   }
		

					</script>
				</head>
				<body>
					<iframe id="ifra" src="http://www.b.com/data.html" 
					frameborder="0" style="display: none" onload="getdata()">
					</iframe>
				</body>
				</html>
				
				www.b.com/data.html:
				
				<!DOCTYPE html>
				<html lang="en">
				<head>
					<meta charset="UTF-8">
					<title>Document</title>
				</head>
				<body>
					<script>
						window.name = "www.b.com";
					</script>
				</body>
				</html>
	3.使用HTML5中新引进的window.postMessage方法来跨域传送数据
		window.postMessage(message,targetOrigin)  方法是html5新引进的特性，可以
		使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前
		IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。
		
		调用postMessage方法的window对象是指要接收消息的那一个window对象，该方法的第一
		个参数message为要发送的消息，类型只能为字符串；第二个参数targetOrigin用来限定
		接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符 *  。
		
		需要接收消息的window对象，可是通过监听自身的message事件来获取传过来的消息，消息
		内容储存在该事件对象的data属性中。
		使用postMessage来跨域传送数据还是比较直观和方便的，但是缺点是IE6、IE7不支持，
		所以用不用还得根据实际需要来决定。
		示例一：
		
		www.a.com/a.html:
		
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>Document</title>
		</head>
		<body>
			<script>
				function load(){
					var ifra = document.getElementById("ifra");
					var win = ifra.contentWindow;
					win.postMessage("这是来自a页面的消息","*");
					
				};
			</script>
			<iframe id="ifra" src="http://www.b.com/bb.html" 
			frameborder="1" onload="load()"></iframe>
	
		</body>
		</html>
		
		www.b.com/b.html:
		
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>Document</title>
		</head>
		<body>
			<script>
				window.onmessage = function(e){
					e = e||event;
					alert(e.data);
				};

			</script>
		</body>
		</html>
		最后网页会弹出：这是来自a页面的消息
		
		示例2：获取其他域数据
		www.a.com/postmessage.html:
		
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>Document</title>
			<style>
				iframe{
					display: none;
				}

			</style>
		</head>
		<body>
			<button id="but">get data</button>
			<iframe id="ifra" src="http://www.b.com/postmessage2.html" 
			frameborder="0"></iframe>
			<script>
				var ifra = document.getElementById("ifra");
				var win = ifra.contentWindow;
				var but = document.getElementById("but");
				but.onclick = function(){
					win.postMessage("hantao","*");
				};
				window.onmessage = function(e){
					e = e||event;
					alert(e.data);
				}
			</script>
		</body>
		</html>
		
		www.b.com/postmessage2.html:
		
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>Document</title>
			<style>
				iframe{
					display: none;
				}

			</style>
		</head>
		<body>
			<button id="but">get data</button>
			<iframe id="ifra" src="http://www.a.com/postmessage.html" 
			frameborder="0"></iframe>
			<script>
			window.onmessage = function(e){
				e = e||event;
				var ifra = document.getElementById("ifra");
				var win = ifra.contentWindow;
				win.postMessage("hello"+e.data,"*");
			};
		
		
		
			</script>
		</body>
		</html>
				
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
