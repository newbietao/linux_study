一、基础知识
	1、pixel像素的基本知识
		px:css piexl 逻辑像素，浏览器使用的抽象单位
		dp，dt：device independent piexl 设备无关像素
		dpr：devicePiexlRatio:设备像素缩放比
		计算公式：1px = （dpr）^2 *dp
	2、DPI、PPI
		DPI:打印机每英寸可以喷的墨汁点
		PPI：屏幕每英寸的像素数量
		ppi越高，像素数越高，图像越清晰，但可视度越低，系统的默认的缩放比越大
	3、viewport
		a）将页面渲染在viewport里面（ios：980px，安卓：）
		b) 然后在进行缩放直到显示整个网页
		c）visual viewport、layout viewport，visual viewport是真实在屏幕上显示的
		   页面，layout viewport是真实布局viewport，
		   visual viewport = layout viewport × salce
		d）不要使用默认的980px(ios)的布局viewport
		   宽度不可控制，不同系统不同设备的默认值不同
		   页面缩小版显示交互不好
		   链接不可点
		   有缩放，缩放后又有滚动
	4、meta标签
		<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no">
		name的值
		width:设置布局viewport的特定的值（"device-width"）
		initial-scale：设置页面初始缩放
		minimum-scale:设置最少缩放
		maximum-scale：最大缩放
		user-scalable:用户能否缩放
	5、px、em、rem的区别
		px：像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。
		em ：是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未
		被人为设置，则相对于浏览器的默认字体尺寸。
		rem：区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。
	6、rem的妙用
		移动端开发时可以将html的尺寸设置成设备的宽度(device-width)/10,这样就
		1 rem = device-width/10;开发时就像bootstrap的栅格系统，使用方便。
二、css3媒体查询
	1.准备工作
		准备工作1：设置Meta标签
		首先我们在使用Media的时候需要先设置下面这段代码，来兼容移动设备的展示效果：
		<meta name="viewport" content="width=device-width, initial-scale=1.0, 
		maximum-scale=1.0, user-scalable=no">
		这段代码的几个参数解释：
		width = device-width：宽度等于当前设备的宽度
		initial-scale：初始的缩放比例（默认设置为1.0）  
		minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    
		maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   
		user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） 
		准备工作2：加载兼容文件JS
		因为IE8既不支持HTML5也不支持CSS3 Media，所以我们需要加载两个JS文件，来保证我们的代码实现兼容效果：
		<!--[if lt IE 9]>
		  <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
		  <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
		<![endif]-->
	2.媒体类型
		All：所有设备
		Print：打印机
		Screen：电脑显示器（支持像素的）
	3.媒体查询的几种方法：
		link方法：就是在link标签引用样式的时候，通过link标签中的media属性来指定不同的
		媒体类型。
		<link rel="stylesheet" type="text/css" href="style.css" media="screen"/>
		<link red="stylesheet" type="text/css" href="print.css" media="print"/>
		@import方法
			方法一：
			@importurl(style.css) screen
			@importurl(print.css) print
			方法二：
			<head>
				<style>
					@importurl(style.css) all
				<style/>
			<head/>
		@media方法：媒体查询
			<head>
				<style>
					@media screen{
						选择器{
							样式
						}
					}
				<style/>
			<head/>
	4.media query使用方法
		@media 媒体类型 and (媒体特性){
			样式
		}
		a)and 可以将多个关键词结合在一起使用，例如设置600px～900px
			@media screen and (min-width:600px) and (max-wdith:900px){
				样式
			}
		b）not 排除某种指定的媒体类型
			@media not print and (min-width:600px){
				样式
			} 
		c)max-width:最大宽度，媒体类型小于或等于制定宽度是生效
			@media screen (max-width:480px){
				样式
			}
		d)min-width:最小宽度，媒体类型大于等于指定的宽度样式生效
			@media screen (min-width:320px){
				样式
			}
		e)图片的响应式设计
			直接使用img标签：因为img标签的高度会随着宽度的变化进行变换，所以只需要，为宽度，
			设置响应式设计就行，通常把宽度设置成百分比的形式。
			使用背景图片的方式：为块局元素设置背景图片，要把快局元素的宽设置成百分比的形式，
			然后不设置高度的大小，使用内填充把高度撑起来。内填充的高度为元素宽度的比例要与
			图片的高和宽的比例相等。背景图片的大小要设置成100%或者cover。
			.img2{
				width:100%;
				padding-top:59%;
				background:url(img/Annie_Splash_10.jpg) 50% 50%;
				background-repeat: no-repeat;
				/*background-size:100%;*/
				-webkit-background-size: cover;
				background-size: cover;
			}
		f)高清图片的处理(Retina屏幕，或者dpr大于等于2的)
			在移动端时，我们可以准备不同分辨率相同内容的两张图片，当移动设备支持Retina，或者
			dpr大于等于2是加载较大分辨率的图片，普通屏幕加载较小的图片。
			针对iphone5：
			@media (max-width:480px ) and (min-resolution:2dppx) , 
			(max-width:480px) and (-webkit-min-device-pixel-ratio：2) {
				样式
			}
		g）常见媒体查询
			iphone：
				media="only screen and (-webkit-min-device-pixel-ratio: 2)"
			ipad：
				media="all and (orientation:portrait)"
				media="all and (orientation:landscape)"
			android：
				media="only screen and (max-device-width:240px)"
三、弹性盒模型
	1、盒模型：
		a）标准和模型
			外盒尺寸计算：element空间尺寸 = 内容尺寸 + 外边距 + 内边距 + 边框
			内盒尺寸计算：element尺寸 = 内容尺寸 + 内边距 + 边框
			height、width = 内容尺寸
		b)IE6以下下盒模型，怪异模式的和模型
			外盒尺寸计算：element空间尺寸 = 内容尺寸 + 外边距
			内盒尺寸计算：element尺寸 = 内容尺寸
			height、width = 内容尺寸 + 边框 + 内边距
	2、弹性盒模型（box-flex 老版）
		a)基本用法：
			父元素：css声明，display：box或者display：inline-box
			子元素：css声明，box-flex:一个整数值。
			
			box和box-flex前都要加代表不同浏览器的前缀。
			如：display: -webkit-box; -webkit-box-flex:1;
			
			如果子元素本身有宽度或者设置了外边距或者内边距，再或者子元素里还有子元素，那么在
			分配时就需要把父元素的宽度减去子元素带有的宽度，在按比例进行分配。
			
			如果想解决不平均等分，需要把宽度设置成0.
			
			比例数值必须是大于等于1的整数。
		b)box-orient
			box-orient用来确定子元素的方向。是横着排还是竖着走。可选的值有：
			horizontal | vertical | inline-axis | block-axis | inherit
			其中，inline-axis是默认值。且horizontal与inline-axis的表现似乎一致的，
			让子元素横排；而vertical与block-axis的表现也是一致的，让元素纵列。
		c)box-direction
			box-direction是用来确定子元素的排列顺序，可选值有：

			normal | reverse | inherit
			
			其中normal是默认值，表示按照正常顺序排列。所谓正常顺序，就是我们看书写文字的顺序，
			从左往右，由上至下，先出现的元素，就上面或是左边。而reverse表示反转，原本从左往
			右应该是1-2-3的，结果显示确实3-2-1。
		d）box-align
			box-align与box-pack都是决定盒子内部剩余空间怎么使用的。在行为效果上就是表现为
			“对齐”，这跟Adobe的软件中的一些“对齐”是一致的。
			其中box-align决定了垂直方向上的空间利用，也就是垂直方向上的对齐表现。
			为了便于记忆，我们可以拿来和CSS2中的vertical-align隐射记忆，两者都有”align”，
			都是都是垂直方向的对齐；而剩下的box-pack就是水平方向的了。

			box的可选参数有：

			start | end | center | baseline | stretch
			其中stretch为默认值，为拉伸，也就是父标签高度过高，其孩子元素的高度就多高，
			start表示顶边对齐，end为底部对齐，center为居中对齐，baseline表示基线
			（英文字母o,m,n等的底边位置线）对齐。
		e)box-pack
			box-pack决定了父标签水平(分布方向上的)遗留空间的使用，其可选值有：
			start | end | center | justify
			
			就大部分的行为表现来说分别对应text-align属性的值：left | right | center | justify；
			但是，之所以box-pack不使用”left”, 而是”start”，是因为box-direction属性，
			这玩意可以反转原本的排列，原本的“左对齐”反转后结果是“右对齐”了，此时”left”
			显然就词不达意了，所以使用”start”更具有概括性，就是与父标签的起始位置对齐，
			从而不会产生语义与行为上的困扰。
			其中”start”是box-pack属性的默认值，justify表示两端对齐。
		f）box-lines
			box-lines是用来决定子元素是可以换行显示呢？还是就算挤出油还是单行显示。两个可选值：

			single | multiple
			其中single是默认值，表示死活不换行，设置box-lines:multiple后，就多行显示了。
		g）box-ordinal-group的作用是拉帮结派
			这个“拉拢”就是这里的box-ordinal-group，拉拢的组织团伙是有一个数字级别的，
			决定了你这个组织的位置。数值越小，位置就越靠前，这不难理解，第一组在最前嘛，
			随后第二组，第三组… 例如：box-ordinal-group:1的组就会在box-ordinal-group:2
			的组前面显示。
	3、弹性盒模型（box-flex 新版）
		a）同老版弹性盒模型一样，要在父元素声明，弹性盒模型，但是新版使用的是flex而不是box，
			display:-webkit-flex;
		b) flex-grow(子元素) ：用来指定扩展比率，即剩余空间是正值时此「flex子项」相对于
		  「flex容器」里其他「flex子项」能分配到空间比例。相当于老版本的box-flex
		   计算公式：
		   <ul class="flex">
				<li>a</li>
				<li>b</li>
				<li>c</li>
			</ul>

			.flex{display:flex;width:1500px;margin:0;padding:0;list-style:none;}
			.flex :nth-child(1){flex:1 1 300px;}
			.flex :nth-child(2){flex:2 2 200px;}
			.flex :nth-child(3){flex:3 3 400px;}
			本例定义了父容器宽（即主轴宽）为1500px，由于子元素设置了伸缩基准值flex-basis，
			相加300+200+400=900，那么容器将有1500-900=600px的剩余宽度；
			于是我们可以计算a,b,c将被扩展量是多少：
			a的扩展量：(1/(1+2+3))*600，即约等于100px
			b的扩展量：(2/(1+2+3))*600，即约等于200px
			c的扩展量：(3/(1+2+3))*600，即约等于300px
			最后a,b,c的实际宽度分别为：300+100=400px, 200+200=400px, 400+300=700px
			从本例能看出：
			当「flex-basis」在「flex」属性中不为0时（包括值为auto，此时伸缩基准值等于自
			身内容宽度），「flex子项」将分配容器的剩余空间（剩余空间即等于容器宽度减去各
			项的伸缩基准值）
			当「flex-basis」在「flex」属性中等于0时，「flex子项」将分配容器的所有空间
			（因为各项的伸缩基准值相加等于0，剩余空间等于容器宽度减去各项的伸缩基准值，
			即减0，最后剩余空间值等于容器宽度），所以可以借助此特性，给各子项定义「flex: n」
			来进行按比例均分容器总宽度
			
			
		c）flex-shrink(子元素)：用来指定收缩比率，即剩余空间是负值时此「flex子项」相对于
		  「flex容器」里其他「flex子项」能收缩的空间比例。在收缩的时候收缩比率会以伸缩基准值加权
		   在「flex」属性中该值如果被省略则默认为「1」
		   计算公式：
		   <ul class="flex">
				<li>a</li>
				<li>b</li>
				<li>c</li>
			</ul>

			.flex{display:flex;width:800px;margin:0;padding:0;list-style:none;}
			.flex :nth-child(1){flex:1 1 300px;}
			.flex :nth-child(2){flex:2 2 200px;}
			.flex :nth-child(3){flex:3 3 400px;}
			本例定义了父容器宽（即主轴宽）为800px，由于子元素设置了伸缩基准值flex-basis，
			相加300+200+400=900，那么子元素将会溢出900-800=100px；
			由于同时设置了收缩因子，所以加权综合可得300*1+200*2+400*3=1900px；
			于是我们可以计算a,b,c将被移除的溢出量是多少：
			a被移除溢出量：(300*1/1900)*100，即约等于16px
			b被移除溢出量：(200*2/1900)*100，即约等于21px
			c被移除溢出量：(400*3/1900)*100，即约等于63px
			最后a,b,c的实际宽度分别为：300-16=284px, 200-21=179px, 400-63=337px
			
			
		d）flex-basis(子元素)：用来指定伸缩基准值，即在根据伸缩比率计算出剩余空间的分布之前，
		「flex子项」长度的起始数值。
		在「flex」属性中该值如果被省略则默认为「0%」
		在「flex」属性中该值如果被指定为「auto」，则伸缩基准值的计算值是自身的 <' width '> 
		设置，如果自身的宽度没有定义，则长度取决于内容。
		e）flex综合写法：
			直接写flex，然后后面家三个参数，第一个参数代表flex-grow，第二个参数代表：flex-shrink，
			第三个参数代表，flex-basis。
			如果缩写「flex: 1」, 则其计算值为「1 1 0%」
			如果缩写「flex: auto」, 则其计算值为「1 1 auto」
			如果「flex: none」, 则其计算值为「0 0 auto」
			如果「flex: 0 auto」或者「flex: initial」, 则其计算值为「0 1 auto」，即「flex」初始值
		f）flex-flow(父元素): 第一个参数子元素的分布方向，第二个参数子元素是否换行。
			flex-flow：<' flex-direction '> || <' flex-wrap '>
			<' flex-direction '>：定义弹性盒子元素的排列方向。
			<' flex-wrap '>：控制flex容器是单行或者多行。
		g）flex-direction(父元素，指定子元素排布方向)：
			row | row-reverse | column | column-reverse
			row：主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。
			row-reverse：对齐方式与row相反。
			column：主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。
			column-reverse：对齐方式与column相反。
		h）flex-wrap(父元素，指定子元素是否换行)：nowrap | wrap | wrap-reverse
			nowrap：flex容器为单行。该情况下flex子项可能会溢出容器
			wrap：flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行
			wrap-reverse：反转 wrap 排列。
		i）align-content(父元素，多行盒模型，竖直空间对齐)
			当伸缩容器的侧轴还有多余空间时，本属性可以用来调准「伸缩行」在伸缩容器里的对齐方式，
			这与调准伸缩项目在主轴上对齐方式的 <' justify-content '> 属性类似。
			请注意本属性在只有一行的伸缩容器上没有效果。
			align-content：flex-start | flex-end | center | space-between | space-around | stretch
			flex-start：各行向弹性盒容器的起始位置堆叠。弹性盒容器中第一行的侧轴起始边界紧靠
			住该弹性盒容器的侧轴起始边界，之后的每一行都紧靠住前面一行。
			flex-end：各行向弹性盒容器的结束位置堆叠。弹性盒容器中最后一行的侧轴起结束界紧
			靠住该弹性盒容器的侧轴结束边界，之后的每一行都紧靠住前面一行。
			center：各行向弹性盒容器的中间位置堆叠。各行两两紧靠住同时在弹性盒容器中居中对齐，
			保持弹性盒容器的侧轴起始内容边界和第一行之间的距离与该容器的侧轴结束内容边界与第
			最后一行之间的距离相等。（如果剩下的空间是负数，则各行会向两个方向溢出的相等距离。）
			space-between：各行在弹性盒容器中平均分布。如果剩余的空间是负数或弹性盒容器中
			只有一行，该值等效于'flex-start'。在其它情况下，第一行的侧轴起始边界紧靠住弹性
			盒容器的侧轴起始内容边界，最后一行的侧轴结束边界紧靠住弹性盒容器的侧轴结束内容边界，
			剩余的行则按一定方式在弹性盒窗口中排列，以保持两两之间的空间相等。
			space-around：各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的
			一半。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于'center'。在其它
			情况下，各行会按一定方式在弹性盒容器中排列，以保持两两之间的空间相等，同时第一行
			前面及最后一行后面的空间是其他空间的一半。
			stretch：各行将会伸展以占用剩余的空间。如果剩余的空间是负数，该值等效于'flex-start'。
			在其它情况下，剩余空间被所有行平分，以扩大它们的侧轴尺寸。
			
		j）align-items(父元素，单行盒模型，竖直空间对齐)
		k）align-self：定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。
		l）justify-content(父元素，单行盒模型，水平空间对齐)
		m）order(子元素)：设置或检索弹性盒模型对象的子元素出現的順序。
			用整数值来定义排列顺序，数值小的排在前面。可以为负值。
			order定义将会影响 <' position '> 值为static元素的层叠级别，数值小的会被数值大的盖住。
			
	4、新老版本弹性盒模型差异
		a、在使用弹性盒模型的时候父元素必须要加display:box 或 display:inline-box
			新版弹性盒模型：flex：display : flex

			老版弹性盒模型：box : display : -webkit-box

		b、box-orient 定义盒模型的主轴方向

		　 	新版：flex：flex-direction: row / column

		　 	老版：box : -webkit-box-orient:

			   　　horizontal 水平显示

				 vertical 垂直方向  

		c、box-direction 元素排列顺序

		　 新版：flex : flex-direction: row-reverse / column-reverse;

		　 老版：box : -webkit-box-direction:

				   　normal 正序

			   　    reverse 反序

		d、box-pack 主轴方向富裕的空间管理

			 新版：flex : justify-content : flex-start / flex-end / center / space-between / space-around;

			 老版：box : -webkit-box-pack

				      start 所有子元素在盒子左侧显示，富裕空间在右侧

				      end 所有子元素在盒子右侧显示，富裕空间在左

				      center 所有子元素居中

				      justify 富裕空间在子元素之间平均分布

		e、box-align 侧轴方向方向富裕的空间管理

			 新版：flex : align-items : flex-start / flex-end / center / baseline

			 老版：box : -webkit-box-align

				      star 所有子元素在据顶

				      end 所有子元素在据底

				      center 所有子元素居中

		f、Box-flex 定义盒子的弹性空间

			 新版：flex : flex-grow

			 老版：box : -webkit-box-flex

			 子元素的尺寸=盒子的尺寸*子元素的box-flex属性值 / 所有子元素的box-flex属性值的和

		g、box-ordinal-group 设置元素的具体位置

			 新版：flex : order

			 老版：box : -webkit-box-ordinal-group
		
四、移动端开发注意事项
五、移动端交互
六、bootstrap
七、总结
































