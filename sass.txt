一、sass入门
	1.变量
		a.变量名：sass里的变量是以$开头的，后面接变量名，变量的命名与php相似
		示例：
			$width:500px;
			div{
				width:$width;
			}
			编译结果：
			div{
				width:500px;
			}
		注意：变量的赋值符号是“:”。
		b.普通变量和默认变量：
			1）普通变量：定义后在全局都可以是用
			2）默认变量：sass的默认变量仅仅雪要在值后面加上!default
			3)sass的默认变量一般是设置默认值的，然后根据需求覆盖的，
			  覆盖只需在默认变量之前进行重新赋值就行。
			4)示例：
				$width:500px;//覆盖默认
				$width:300px !default;//默认变量
				div{
					width:$width;
				}
				编译结果：
				div{
					width:500px;
				}
		c.变量的调用(局部变量和全局变量)
			1）全局变量
				sass里的全局变量在全局都可以调用，在sass的选择器、函数、混合宏
				。。外面的定义的变量，是全局变量，例如：
				$bg-color:red;
				div{
					$color:#000;
					background:$bg-color;//调用全局变量
					color:$color;//调用局部变量
					
				}
				编译结果：
				div{
					background:red;
					color:#000;
				}
			2)局部变量：
				局部变量实在局部定义的变量，作用范围仅仅是当前作用域，其他
				作用域无效，在当前作用域，如果局部变量和全局变量一至，局部变量覆盖
				全局变量。如果局部变量加!global参数，就可以变成全局变量。例如：
				$color:red;//全局变量
				.div1{
					color:$color;//应用全局变量
				}
				.div2{
					$color:green;//声明局部变量
					color:$color;//调用局部变量
				}
				.div3{
					$bg-color:green !global;//定义全局变量
					background:$bg-color;//调用全局变量
				}
				.div4{
					background:$bg-color;//调用全局变量
				}
				编译结果：
				.div1 {
				  color: red; }

				.div2 {
				  color: green; }

				.div3 {
				  background: green; }

				.div4 {
				  background: green; }
			
		
		
	2.嵌套
		a.选择器嵌套：
			假设html：
			<html>
				<header>
					<nav>
						<a></a>
						<a></a>
						<a></a>
						<a></a>
					</nav>
				</header>
			</html>
			想选中a标签css：
				nav a{
					color:red;
				}
				或者：
				header nav a{
					color:red;
				}
			sass:
				nav{
					a{
						color:red;
						header &{
							color:red;
						}
					}
				}
		b.属性嵌套：
			sass提供了属性嵌套：用于前缀相同后缀不同的属性，例如：
			div{
				border:{
					top:1px solid #000;
					left:2px solid red;
				}
			}
			编译结果：
			div{
				border-left:1px solid red;
				border-top:1px solid #000;
			}
		c.伪类嵌套：&代表嵌套外面的父辈元素
			scss:
			div{
				&:after,&:before{
					content:"";
					display: block;
				}
			}
			css:
			div:after, div:before {
		  		content: "";
		  		display: block; }
	3.混合宏
		a.声明混合宏：
			1）不带参数的
			@mixin border-radius{//使用@mixin声明混合宏。
				-webkit-border-radius:5px;
				border-radius:5px;
			}
			2）带参数的混合宏：
			@mixin border-radius($radius:5px){
				-weblit-border-radius:$radius;
				border-radius:$radius;
			
			}
		b.调用混合宏：
			1）使用@include调用混和宏。
				@mixin border-radius{
					-webkit-border:5px;
					border-radius:5px;
				}
				button{
					@include border-radius;
				}
				编译结果：
				button{
					-webkit-border-radius:5px;
					border-radius:5px;
				}
			2)调用一个可以传不带值的参数的混合宏：
				@mixin font($size,$weight){
					font-size:$size;
					font-weight:$weight;
				}
				p{
					@include font(20px,900);
				}
				编译结果：
				p{
					font-size:20px;
					font-weight:900;
				}
			3)调用一个带值的参数的混合宏
				@mixin font($size:20px,$weight:700){
					font-size:$size;
					font-weight:$weight;
				}
				p{
					@include font();//不传参数使用默认值
				}
				a{
					@include font(10px,900);//窜地参数使用参数值
				}
				编译结果：
				p{
					font-size:20px;
					font-weight:700;
				}
				a{
					font-size:10px;
					font-weight:900
				}
		4.继承
			a.@extend关键字进行继承，已存在的类样式块。
			b.示例：
				.btn{
					width:120px;
					height:30px;
					color:red;
				}
				.btn2{
					@extend .btn;
				}
				编译结果：
				.btn,.btn2{
					width:120px;
					height:30px;
					color:red;
				}
		5.占位符：%placeholder
			a.占位符：是%加一个占位符的名字组成的一个样式块，并可以用@extend继承。
			  如果不被@extend继承，则不会生成代码。
			b.示例：
				%btn{
					width:500px;
					height:800px;
				}
				.btn{
					@extend %btn;
				}
				编译结果：
				.btn{
					width:500px;
					height:800px;
				}
		6.插值：#{}，在选择器、属性名、字符串中使用
			a.#{}不能在@mixin中使用
			b.在构建选择器中使用
				$btn:bnt;
				$btn2:".btn2";
				.#{$btn}{
					width:200px;
				}
				#{$btn2}{
					width:200px;
				}
				编译结果：
				.bnt {
				  width: 200px; }

				.btn2 {
				  width: 200px; }
			c.在@extend中使用
				button{
					@extend #{$btn2};
				}
		7.注释：
			a./**/这种注释可以在可以在css文件中显示
			b.//不能在css中显示
		8.数据类型：
			a.数字：1、2、3、10px
			b.字符串："foo"、'red'、blue
			c.颜色：blue、#000、rgba(255,0,0,0.5)
			d.bool：true、false
			e.空值：null
			f.值列表：使用空格或者逗号分开，如，10px 20px 30px、Arial,Helvetica,
			sana-serit
		9.算数运算：
			$width1:200px;
			$width2:100px;
			$color1:#010203;
			$color2:#040506;
			.width1{
				width:$width1 + $width2;
				height:$width1 + 10px;
				color:$color1 + $color2;
			} 
			.width2{
				width:$width1 - $width2;
				color:$color2 - $color1;
			}
			.width3{
				width:$width2 * 2;
				color:$color1 * 2;
			}
			.width4{
				width:$width1 / 2;
				color:$color2 / 2;
			}
 二、sass的进阶
 	1.@if:的使用
 		a.和其他语言的if语句基本相似
 			@if bool {}或者 @if bool{}@else{} 或者 
 			@if bool {} @else if bool {}
 		b.示例：
 			@mixin blockorhidden($bool:true){
 				@if bool {
 					display:block;
 				}@else{
 					display:none;
 				}
 			}
 			.block{
 				@include blockorhidden(true);
 			}
			.hidden{
				@include blockorhidden(false);
			}
			编译结果：
			.block {
			  display: block; }

			.hidden {
			  display: none; }
	2.@for 
		a.@for $i from <start> to <end>
		  @for $i from <start> through <end>
		b.strat 起始位置 end结束位置 $i表示变量。
		  to 不包括 end、through 包括end
		c.示例：
			@mixin forspan($num){
				@for $i from 1 to $num{
					.span#{$i}{
						width:10px;
					}
				}
			}
			div{
				@include forspan(4);
			}
			编译结果：
			div .span1 {
			  width: 10px; }
			div .span2 {
			  width: 10px; }
			div .span3 {
			  width: 10px; }
	3.@while
		
		$width:20px;
		$count:4;
		@while $count >= 1 {
			.span#{$count} {
				width: $width * $count;
			}
			$count:$count - 1;
		}
		编译结果：
		.span4 {
		  width: 80px; }

		.span3 {
		  width: 60px; }

		.span2 {
		  width: 40px; }

		.span1 {
		  width: 20px; }
	4.@each
		$list : img1 img2 img3 imd4;
		@each $img in $list{
			.#{$img} {
				background-image:url("img/#{$img}.jpg"); 
			}
		}
		编译结果：
		.img1 {
		  background-image: url("img/img1.jpg"); }

		.img2 {
		  background-image: url("img/img2.jpg"); }

		.img3 {
		  background-image: url("img/img3.jpg"); }

		.imd4 {
		  background-image: url("img/imd4.jpg"); }
	
三、sass函数
	1.字符串函数：
		a.unquote($str);函数删除字符串中的引号
			$str1 : "hello";
			$str2 : "'hello'";
			$str3 : "I'm hantao";
			$str4 : '"hello"'; 

			.str1{
				content: unquote($str1);
			}
			.str2{
				content: unquote($str2);
			}
			.str3{
				content: unquote($str3);
			}
			.str4{
				content: unquote($str4);
			}
			编译结果：
			.str1 {
			  content: hello; }

			.str2 {
			  content: 'hello'; }

			.str3 {
			  content: I'm hantao; }

			.str4 {
			  content: "hello"; }
		b.quote($str);函数给字符串添加引号
			$str1 : hello;
			$str2 : "hello";
			$str3 : 'hello';
			.str1{
				content:quote($str1);
			}
			.str2{
				content:quote($str2);
			}
			.str3{
				content:quote($str3);
			}
			编译结果：
			.str1 {
			  content: "hello"; }

			.str2 {
			  content: "hello"; }

			.str3 {
			  content: "hello"; }
		c.To-upper-case\To-lower-case
			1)to-upper-case:将小写字母变成大写字母、to-lower-case:将大写字母变为小写字母
				.toUp{
					content:to-upper-case("hello");
				}
				.toLow{
					content:to-lower-case("HELLO");
				}
				编译结果：
				.toUp {
				  content: "HELLO"; }

				.toLow {
				  content: "hello"; }
	2.数字函数：
		a.percentage($num):将一个不带单位的数字转换为百分比值;
			.div1{
				width:percentage(0.2);
			}
			.div2{
				width:percentage(2px / 10px);
			}
			.div3{
				width:percentage(2em / 5em);
			}
			编译结果：
			.div1 {
			  width: 20%; }

			.div2 {
			  width: 20%; }

			.div3 {
			  width: 40%; }
		b.round($num):将一个数值进行四舍五入，注意小数点后的位数不要太多。
			.div1{
				width:round(12.4px);
			}
			.div2{
				width:round(12.4999px);
			}
			.div3{
				width:round(12.5111px);
			}
			.div4{
				width:round(12.9999px);
			}
			编译结果：
			.div1 {
			  width: 12px; }

			.div2 {
			  width: 12px; }

			.div3 {
			  width: 13px; }

			.div4 {
			  width: 13px; }
		c.ceil($num):向上取整
		d.floor($num):向下取整
			.ceil1{
				width:ceil(12.1px);
			}
			.ceil2{
				width:ceil(12.9px);
			}
			.floor1{
				width:floor(12.1px);
			}
			.floor2{
				width:floor(12.9px);
			}
			编译结果：
			.ceil1 {
			  width: 13px; }

			.ceil2 {
			  width: 13px; }

			.floor1 {
			  width: 12px; }

			.floor2 {
			  width: 12px; }
		e.abs($num):返回一个数的绝对值
			.div1{
				width:abs(-12px);
			}
			.div2{
				width:abs(12px);
			}
			编译结果：
			.div1 {
			  width: 12px; }

			.div2 {
			  width: 12px; }
		f.min($num....):找到几个数值的最小值
		g.max($num...):找到几个数中的最大值
			$num1 : 12px;
			$num2 : 23px;
			$num3 : 10px;
			.max{
				width:max($num1,$num2,$num3);
			}
			.min{
				width:min($num1,$num2,$num3);
			}
			编译结果：
			.max {
			  width: 23px; }

			.min {
			  width: 10px; }
		h.random():获取随机数，范围是0～1;
			.random1{
				width:random()+px;
			}
			编译结果：
			.random1 {
	 			 width: 0.79395px; }
	3.列表函数
		a.length($list):返回列表长度，length的参数要用空格分开不能使用逗号
			$list : 12px 13px 14px;
			.span{
				content:"list length is #{length($list)}"
			}
			编译结果：
			.span {
	 		 	content: "list length is 3"; }
		b.nth($list,$n):返回列表指定的某个标签的值
			$list: 12px 13px 14px;
			.div{
				width:nth($list,2);
				height:nth($list,1);
			}
			编译结果：
			.div {
			  width: 13px;
			  height: 12px; }
		c.join($list1,$list2,[$separator]):将两个列表链接成一个列表
			$list1:12px 13px 14px;
			$list2:15px 16px 17px;
			$list3:join($list1,$list2);
			@each $width in $list3{
				.div{
					width:#{$width};
				}
			} 
			编译结果：
			.div {
			  width: 12px; }

			.div {
			  width: 13px; }

			.div {
			  width: 14px; }

			.div {
			  width: 15px; }

			.div {
			  width: 16px; }

			.div {
			  width: 17px; }

		d.append($list,$val):将某个值添加到列表后
			$list:12px 13px 14px ;
			.div{
				content:append($list,15px);
			}
			编译结果：
			.div {
			  content: 12px 13px 14px 15px; }
		e.index($list,$val):返回某个值在列表中的位置
			$list : 13px 12px 14px;
			.div{
				content:"13px in list :"index($list,13px);
			}
			编译结果：
			.div {
			  content: "13px in list :" 1; }
	4.introspection函数
		a.type-of($val):返回一个值的类型
		b.unit($num):返回一个值的单位
		c.unitless($num):判断一个数值是否带值单位
		d.comparable($num1,$num2):判断两个值是否可以进行加减合并。
		@mixin clo($width:50%){
			@if type-of($width) != number{//判断是否是数字
				@error "input must be a number, your input is a #{$width}";
			}
			@if not unitless($width){//判断是否有单位
				@if unit($width) != "%"{//判断单位是否是%
					@error "input must be a bercentage, your input is a #{$width}";
				}
			} @else{//转化为百分比
				@warn "input must be a bercentage, your input is a #{$width}";
				$width : percentage($width/100);
			}
			width:$width;
		}
		div{
			@include clo(12);
		}
		控制台输出：
		WARNING: input must be a bercentage, your input is a 12
		编译结果：
		div {
		  width: 12%; }
	5.三元条件函数
		if($bool,$val1,$val2);
		$bool为真，返回$val1,为假返回$val2;
		
		$bool1:true;
		$bool2:false;
		.div{
			width:if($bool1,12px,21px);
			height:if($bool2,12px,21px);
		}
		编译结果：
		.div {
		  width: 12px;
		  height: 21px; }
	6.map函数
		a.map的定义
			首先有一个类似sass变量的值，用$加上命名空间声明map。后面紧接一个小括号（），
			将数据以key:value的形式赋予，其中key和value是成对出现，并且每对之间使用逗号
			分割，其中最后一组后面没有逗号。
			
			$map1:(
				key1:val1,
				key2:val2,
				key3:val3
			);
			$map2:(
				key1:val1,
				key2:(
					key-1:val-1,
					key-2:val-2
				),
				key3:val3
			)
		b.map-get($map,$key):根据给定的key值，返回map中相关的值
			$map:(
				red : #f00,
				green : #0f0,
				blue : #00f
			);
			.div1{
				color:map-get($map,red);
			}
			编译结果：
			.div1 {
			  color: #f00; }
		c.map-merge($map1,$map2):将两个map合并成一个map
			$map:(
				red : #f00,
				green : #0f0,
				blue : #00f
			);
			.div1{
				color:map-get($map,red);
			}
			编译结果：
			div {
			  content: man; }
		d.map-remove($map,$key):从map中删除一个key，符返回一个新的map
		e.map-keys($map):返回map中的所有key
		f.map-values($map):返回map中的所有value;
	7.rgb函数
		a.rgb($red,$green,$blue):根据红绿蓝创建一个颜色
		b.rgba($red,$green,$blue,$alpha):根据红绿蓝和透明度创建一个颜色
		c.red($color):从一个颜色中获取红色的值
		d.green($color):从一个颜色中获取绿色的值
		e.blue($color):从一个颜色中获取蓝色的值
		f.mix($color1,$color2):把两种颜色混合到一起
	8.@指令：
		a.@import
		b.@media
		c.@extend
		d.@at-root
		e.@debug
		f.@warn
		g.@error
		
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

