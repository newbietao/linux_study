一.jq --ajax学习笔记
	jq的ajax都依靠jquery.js文件所以，我们在使用jq-ajax必须先引进jquery.js
	文件，其中jq的ajax常用的方法有$.get();$.post();$.ajax();
	1.$.get()方法：//建议使用get方法进行查询，不要进行修改，这样不安全。
		$.get("url",//url：后台服务器的地址
			{message:"hello"},//使用get方法发送的数据类型为object
			function(data，textStatus){//callback//回调函数，载入成功后执行的函数
			//参数1：服务器返回的数据
			//参数2：请求的状态：success.error.timeout.notmodified四种
			
			},
			"text"//服务器的返回类型，xml、json、script、text。
		);
	2.$.post()方法：//和$.get()方法相似，相对比较安全因为请求的内容在请求体里
		$.post("url",//url：后台服务器的地址
			{message:"hello"},//使用post方法发送的数据类型为object
			function(data，textStatus){//callback//回调函数，载入成功后执行的函数
			//参数1：服务器返回的数据
			//参数2：请求的状态：success.error.timeout.notmodified四种
			
			},
			"text"//服务器的返回类型，xml、json、script、text。
		);
	3.$.ajax();//这是jquery最低成的ajax实现，其他方法都可以使用他实现
		$.ajax({
			url:"url",//发送请求的地址
			type:"POST",//请求的方式：默认是GET
			data:{name:"hantao",pass:"1244"},//发送到服务器的数据
			dataType:"text",//服务器返回的数据类型:xml\html\script\json\text
			beforeSend:function(XMLHttpRequest){
				//在发送请求前可以修改XMLHttpRequest对象
				//return false可以取消这次请求	
				this;//调用本次ajax请求时传递的options参数
			},
			complete:function(XMLHttpRequest，textStatus){
				//请求完成后的回调函数，无论是否成功
				//参数1：XMLHttpRequest对象
				//参数2：一个描述请求成功类型的字符串	
				this;//调用本次ajax请求时传递的options参数	
			},
			success:function(data,textStatus){
				//请求成功的回调函数
				//参数1：服务器返回的数据
				//参数2：描述状态的字符串
				this;//调用本次ajax请求时传递的options参数		
			},
			error:function(XMLHttpRequest,textStatus,errorThrown){
				//请求失败时调用的函数
				//参数1：XMLHttpRequest对象
				//参数2：错位信息
				//参数3：错误的捕获对象
				this;//调用本次ajax请求时传递的options参数
			},
			globsl:true//是否出发全局ajax事件

		});
二、原生ajax
	1.http:基础知识：
		1）http:协议
			a.http协议的：消息分类
				http消息(报文)，分为请求消息和相应消息两种基本分类，其中请求消息是客户端
				发送给服务器和资源的消息，响应消息是服务器对请求消息的答应，一般来说，一个
				相应消息对应一个请求消息，不多不少。
			b.http协议：特点
				无链接：无链接的含义是限制每次链接只能处理一个请求。服务器处理完客户端
				的请求，并收到客户的应答后，即断开链接。采用这种方法可以节省时间。
				无状态：http协议是一种无状态的协议。无状态是指协议对事物处理没有记忆能力。
				缺少状态意味着如果后续处理需要前面的信息，这它必须重转，这样可能导致每一次
				传送的数据量增大，另一方面，在服务器不需要先前信息时它的应答就比较大。
			c.http协议的基本格式
				。行首
				。头部(header)
				。正文(body)
		2）http：请求
			a.请求的格式
				。请求行
				。请求头部
				。请求正文
			b.请求行的格式
				请求的方法  请求路径  http版本
				例如：GET /luozhihao/p/5846925.html HTTP/1.1
				在浏览器进入开发者工具，在network里可以看到请求的信息。
			c.请求的方法：这里只介绍常用的方法
				。get:请求可被缓存,请求保留在浏览器历史记录中,请求可被收藏为书签
					请求不应在处理敏感数据时使用,请求有长度限制,建议只用与请求数据
					不要用作修改数据，例如页面跳转等等。
				。post：请求不会被缓存,请求不会保留在浏览器历史记录中,不能被收藏为书签
					请求对数据长度没有要求,可以用于表单提交，注册等等。
		3）http：响应
			a.响应的格式
				。响应行
				。响应头部
				。响应正文
			b.响应行的格式
				http版本 状态码 状态文本
				例如：HTTP/1.1 200 OK
				在浏览器进入开发者工具，在network里可以看到请求的信息。
			c.状态码：
				1xx：信息响应类，表示接收到请求并且继续处理
				2xx：处理成功响应类，表示动作成接收，理解和接受。
				3xx：从定向响应类，为了完成指定的动作，必须进行下一步处理
				4xx：客户端错误类，客户端请求包括错误语法，或者不能正确执行
				5xx：服务端错误类，服务器不能正确执行一个正确请求。
				具体：请访问http://tool.oschina.net/commons?type=5
		4）http协议示例：
			请求头：
				GET /tags/html_ref_httpmethods.asp HTTP/1.1
				Host: www.w3school.com.cn
				Connection: keep-alive
				Cache-Control: max-age=0
				Upgrade-Insecure-Requests: 1
				User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36
				 (KHTML, like Gecko) Chrome/54.0.2840.90 Safari/537.36
				Accept: text/html,application/xhtml+xml,application/xml;q=0.9,
				image/webp,*/*;q=0.8
				Referer: https://www.baidu.com/link?url=BIYyI
				5wKqa-ln4Hfw6fTLEnDJSpHrJEAiGjUNrZftRbTGSSyqqmslt7COlo02g_R5Y3
				nk31xAh8_xMDbFIQ88NS_wcFce67-_X0FOM2W9ji&wd=&eqid=d96855ca0006
				491e00000002581dca15
				Accept-Encoding: gzip, deflate, sdch
				Accept-Language: zh-CN,zh;q=0.8,en;q=0.6
				Cookie: ASPSESSIONIDQQQRQTDC=FJOAIDHCHELPIMMCNPNFJFEP
			响应头：
				HTTP/1.1 200 OK
				Date: Sat, 05 Nov 2016 12:09:21 GMT
				Server: Microsoft-IIS/6.0
				X-Powered-By: ASP.NET
				Content-Length: 20672
				Content-Type: text/html
				Cache-control: private
	2.原生js 实现ajax
		1）获取XMLHttpRequest对象
			var xhr = new XMLHttpRequest();//获取XMLHttpRequest对象
			如果想要兼容老式浏览器
			var xhr;
			if(window.XMLHttpRequest){
				xhr = new XMLHttpRequest();//新式浏览器
			}else if(window.ActiveXObject){//老式浏览器
				xhr=new ActiveXObject("Microsoft.XMLHTTP");
			}
		2）设置参数，open方法
			if(xhr){
				xhr.open('GET', '/test/', true); // 以GET请求的方式向
												//'/test/'路径发送异步请求
			}
			open方法为我们创建了一个新的http请求，其中第一个参数为请求方式，
			一般为'GET'或'POST'；第二个参数为请求url；第三个参数为是否异步，默认为true。
		3)发送请求，send()方法
			xhr.send();
			这里需要注意的是如果使用GET方法传递参数，我们可以直接将参数放在url后面，
			比如'/test/?name=luozh&size=12';如果使用POST方法，那么我们的参数需要
			写在send方法里，如：
			xhr.open('POST', '/test/', true);
			xhr.send('name=luozh&size=12');
		4)设置发送的数据格式
			
		5）状态监听
			xhr.onreadystatechange = function () {// 利用onreadystatechange监测状态
				if (xhr.readyState === 4) {  // readyState为4表示请求响应完成
				    if (xhr.status === 200) { // status为200表示请求成功
				        console.log('执行成功');
				    } else {
				        console.log('执行出错');
				    }   
				}
			}


























	
