1.初始化一个git仓库
	git init 
2.为git添加一个文件
	git add filename
3.提交一个版本
	git commit -m "版本描述信息"
4.链接远程仓库
	git remote add origin "github仓库地址"
5.向远程仓库提交
	git push -u origin master
	第一次可以带-u选项，而其他时候不用带-u选项
6.查看仓库当前状态
	git status
7.查看git的所有版本
	git log
8.查看git的所有提交记录
	git reflog
9.版本退回
	git reset --hard commit_id
	其中的commit_id:可以通过git log和git reflog查看
	commit_id也可以使用HEAD指针代表，其中HEAD代表当前版本，HEAD^代表上一般本，
	HEAD^^代表上上一版本HEAD^^^代表上上上一版本，当然往上100个版本写100个^比较
	容易数不过来，所以写成HEAD~100。
10.工作区和暂存区
	git的工作区就是之当前文件夹
	暂存区：指的是git版本库中的一个重要的组成（暂存区、master分支）
	git add filename 就是将将文件添加到暂存区
	git commit 就是将暂存区的版本提交到当前分支上
11.git的管理机制
	Git跟踪并管理的是修改，而非文件。每次修改，如果不add到暂存区，
	那就不会加入到commit(当前分支中)中。
12.删除文件
	git rm filename
	git commit -m "删除一个文件"
13.撤销修改
	命令git checkout -- readme.txt意思就是，把readme.txt文件在
	工作区的修改全部撤销，这里有两种情况：
	
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和
	版本库一模一样的状态；
	
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回
	到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	
	git checkout -- file命令中的--很重要，没有--，就变成了“切换到另
	一分支。
	
	git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回
	工作区。
14.git pull
	git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。

	$ git pull <远程主机名> <远程分支名>:<本地分支名>
	比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。

	$ git pull origin next:master
	如果远程分支是与当前分支合并，则冒号后面的部分可以省略。

	$ git pull origin next
	
































